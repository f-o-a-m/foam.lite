// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };

  exports.unsafeDelete = function (label) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if (key !== label && {}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      return copy;
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
  exports["unsafeDelete"] = $foreign.unsafeDelete;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                              
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                              
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  }; 
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $233 = Data_NonEmpty.singleton(plusList);
      return function ($234) {
          return NonEmptyList($233($234));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["monoidList"] = monoidList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 86, column 3 - line 89, column 25): " + [ ep.constructor.name ]);
  }; 
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 155, column 3 - line 171, column 22): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 123, column 3 - line 129, column 23): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 104, column 3 - line 108, column 45): " + [ gp.constructor.name ]);
  };
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 47, column 5 - line 65, column 37): " + [ c.constructor.name ]);
      };
      return function ($234) {
          return (function (v) {
              return prefix + v;
          })(go($234));
      };
  })();
  exports["Graphics"] = Graphics;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["Reset"] = Reset;
  exports["PForeground"] = PForeground;
  exports["Red"] = Red;
  exports["Green"] = Green;
  exports["Yellow"] = Yellow;
  exports["White"] = White;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };
  exports["withGraphics"] = withGraphics;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);      
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["isNull"] = isNull;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var showJsonDecodeError = new Data_Show.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof UnexpectedValue) {
          return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
      };
      if (v instanceof AtIndex) {
          return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof AtKey) {
          return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof Named) {
          return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof MissingValue) {
          return "MissingValue";
      };
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
  });
  var printJsonDecodeError = function (err) {
      var go = function (v) {
          if (v instanceof TypeMismatch) {
              return "  Expected value of type '" + (v.value0 + "'.");
          };
          if (v instanceof UnexpectedValue) {
              return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
          };
          if (v instanceof AtIndex) {
              return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
          };
          if (v instanceof AtKey) {
              return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof Named) {
              return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof MissingValue) {
              return "  No value was found.";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
      };
      return "An error occurred while decoding a JSON value:\x0a" + go(err);
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["UnexpectedValue"] = UnexpectedValue;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["printJsonDecodeError"] = printJsonDecodeError;
  exports["showJsonDecodeError"] = showJsonDecodeError;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["showEither"] = showEither;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.rem = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["comparing"] = comparing;
  exports["abs"] = abs;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };                                                         
  var decimal = 10;
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["decimal"] = decimal;
  exports["hexadecimal"] = hexadecimal;
  exports["even"] = even;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["rem"] = $foreign.rem;
  exports["pow"] = $foreign.pow;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($21) {
                  return $19($20($21));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  }; 
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["sort"] = sort;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["reverse"] = $foreign.reverse;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];                  
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
              return function (k) {
                  return function (v) {
                      return Foreign_Object_ST.poke(k)(v)(s$prime);
                  };
              };
          })(s)(m);
      });
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($44) {
          return $43(Data_Function["const"]($44));
      };
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["mapWithKey"] = mapWithKey;
  exports["union"] = union;
  exports["traversableObject"] = traversableObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var getFieldOptional$prime = function (decoder) {
      return function (obj) {
          return function (str) {
              var decode = function (json) {
                  var $5 = Data_Argonaut_Core.isNull(json);
                  if ($5) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                  };
                  return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(json)));
              };
              return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var getFieldOptional = function (decoder) {
      return function (obj) {
          return function (str) {
              var decode = (function () {
                  var $14 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($15) {
                      return $14(decoder($15));
                  };
              })();
              return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                  var $16 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                  return function ($17) {
                      return $16(decode($17));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var getField = function (decoder) {
      return function (obj) {
          return function (str) {
              return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                  var $18 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($19) {
                      return $18(decoder($19));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
  var decodeJObject = (function () {
      var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
      return function ($21) {
          return $20(Data_Argonaut_Core.toObject($21));
      };
  })();
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function ($55) {
          return $54(Data_Int.fromNumber($55));
      };
  })())(decodeNumber);
  var decodeForeignObject = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $56 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
          var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
          return function ($58) {
              return $56($57($58));
          };
      })())(decodeJObject);
  };                                                                                                                                                                
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeNumber"] = decodeNumber;
  exports["decodeInt"] = decodeInt;
  exports["decodeString"] = decodeString;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getFieldOptional'"] = getFieldOptional$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (r) {
                      return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                  };
              };
          };
      };
  };
  exports["get"] = get;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var GDecodeJson = function (gDecodeJson) {
      this.gDecodeJson = gDecodeJson;
  };
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var gDecodeJsonNil = new GDecodeJson(function (v) {
      return function (v1) {
          return new Data_Either.Right({});
      };
  });
  var gDecodeJson = function (dict) {
      return dict.gDecodeJson;
  };                                                                        
  var decodeRecord = function (dictGDecodeJson) {
      return function (dictRowToList) {
          return new DecodeJson(function (json) {
              var v = Data_Argonaut_Core.toObject(json);
              if (v instanceof Data_Maybe.Just) {
                  return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Data_RowList.RLProxy.value);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
              };
              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 99, column 5 - line 101, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeString);
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNumber);
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
  var decodeJsonInt = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeInt);        
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var gDecodeJsonCons = function (dictDecodeJson) {
      return function (dictGDecodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return new GDecodeJson(function (object) {
                          return function (v) {
                              var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var v1 = Foreign_Object.lookup(fieldName)(object);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(decodeJson(dictDecodeJson)(v1.value0)))(function (val) {
                                      return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Data_RowList.RLProxy.value))(function (rest) {
                                          return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(val)(rest));
                                      });
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                              };
                              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 122, column 5 - line 129, column 44): " + [ v1.constructor.name ]);
                          };
                      });
                  };
              };
          };
      };
  };
  var decodeForeignObject = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson)));
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson)));
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["decodeRecord"] = decodeRecord;
  exports["gDecodeJsonNil"] = gDecodeJsonNil;
  exports["gDecodeJsonCons"] = gDecodeJsonCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var getFieldOptional$prime = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var getFieldOptional = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getFieldOptional(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var getField = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var defaultField = function (parser) {
      return function ($$default) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
      };
  };
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getFieldOptional'"] = getFieldOptional$prime;
  exports["defaultField"] = defaultField;
})(PS);
(function(exports) {
  "use strict";
  var BigNumber =require("bn.js"); 

  exports.toBigNumber = function(str) {
      return new BigNumber(str, 16);
  };

  var signedIsNegative = function (value) {
      var head = new BigNumber(value.substr(0, 1), 16).toString(2);
      var msb;
      if (head.length == 4) {
          msb = head.substr(0,1);
      } else {
          msb = '0';
      }
      return msb === '1';
  };

  exports.toBigNumberFromSignedHexString = function (value) {
      if (signedIsNegative(value)) {
          return new BigNumber(value, 16).sub(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).subn(1);
      }
      return new BigNumber(value, 16);
  };
})(PS["Network.Ethereum.Core.HexString"] = PS["Network.Ethereum.Core.HexString"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadExceptT(dictMonadEffect.Monad0());
      }, (function () {
          var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
          var $95 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($96) {
              return $94($95($96));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function(exports) {
  'use strict';

  exports.realGetAtOffset = function(Nothing) {
      return function(Just) {
          return function(offset) {
              return function(buffer) {
                  return function() {
                      var octet = buffer[offset];
                      return octet === undefined
                          ? Nothing
                          : Just(octet);
                  };
              };
          };
      };
  };
})(PS["Data.ByteString"] = PS["Data.ByteString"] || {});
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];
  var MutableBuffer = function (Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
      this.Monad0 = Monad0;
      this.concat = concat;
      this["concat'"] = concat$prime;
      this.copy = copy;
      this.create = create;
      this.fill = fill;
      this.freeze = freeze;
      this.fromArray = fromArray;
      this.fromArrayBuffer = fromArrayBuffer;
      this.fromString = fromString;
      this.getAtOffset = getAtOffset;
      this.read = read;
      this.readString = readString;
      this.setAtOffset = setAtOffset;
      this.size = size;
      this.slice = slice;
      this.thaw = thaw;
      this.toArray = toArray;
      this.toArrayBuffer = toArrayBuffer;
      this.toString = toString;
      this.unsafeFreeze = unsafeFreeze;
      this.unsafeThaw = unsafeThaw;
      this.write = write;
      this.writeString = writeString;
  };
  var writeString = function (dict) {
      return dict.writeString;
  };
  var write = function (dict) {
      return dict.write;
  };
  var toString = function (dict) {
      return dict.toString;
  };
  var toArray = function (dict) {
      return dict.toArray;
  };
  var size = function (dict) {
      return dict.size;
  };
  var readString = function (dict) {
      return dict.readString;
  };
  var fromString = function (dict) {
      return dict.fromString;
  };
  var fromArray = function (dict) {
      return dict.fromArray;
  };
  var create = function (dict) {
      return dict.create;
  };
  var concat = function (dict) {
      return dict.concat;
  };
  exports["MutableBuffer"] = MutableBuffer;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["size"] = size;
  exports["concat"] = concat;
})(PS);
(function(exports) {
  /* global exports */
  /* global Buffer */
  "use strict";

  exports.copyAll = function(a) {
    return function() {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function() {
            buf['write' + ty](value, offset);
            return {};
          }
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function() {
              return buff.write(value, offset, length, encoding);
            }
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function() {
          buff[offset] = value;
          return {};
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function() {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function() {
            buf.fill(octet, start, end);
            return {};
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON()
    return json.data || json;
  };

  exports.toArrayBuffer = function(buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function(ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf['read' + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing
                               : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports["concat'"] = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var Data_Show = $PS["Data.Show"];                
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [ v.constructor.name ]);
  });
  exports["UInt8"] = UInt8;
  exports["Int16BE"] = Int16BE;
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["Base64"] = Base64;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                     
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };
  var read = (function () {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($6) {
          return $foreign.readImpl($5($6));
      };
  })();
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      var $7 = $foreign.fromStringImpl(str);
      return function ($8) {
          return $7(Node_Encoding.encodingToNode($8));
      };
  };
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["concat'"] = $foreign["concat'"];
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($22) {
          return $foreign.writeInternal($21($22));
      };
  };
  var unsafeThaw = function (dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($24) {
          return $23($24);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($26) {
          return $25($26);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];                
  var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
      return Effect.monadEffect;
  }, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Quotient"] = $PS["Type.Quotient"] || {};
  var exports = $PS["Type.Quotient"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Show = $PS["Data.Show"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Quotient = function (x) {
      return x;
  };
  var Canonical = function (canonical) {
      this.canonical = canonical;
  };
  var mkQuotient = Quotient;
  var canonicalMod256 = new Canonical(function (v) {
      var $47 = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt);
      return function ($48) {
          return $47((function (v1) {
              return Data_Int.rem(v1)(256);
          })($48));
      };
  });
  var canonical = function (dict) {
      return dict.canonical;
  };
  var runQuotient = function (dictCanonical) {
      return function (v) {
          return canonical(dictCanonical)(Type_Proxy["Proxy"].value)(v);
      };
  };
  var showQuotient = function (dictShow) {
      return function (dictCanonical) {
          return new Data_Show.Show(function (a) {
              return "(mkQuotient " + (Data_Show.show(dictShow)(runQuotient(dictCanonical)(a)) + ")");
          });
      };
  };
  exports["mkQuotient"] = mkQuotient;
  exports["runQuotient"] = runQuotient;
  exports["showQuotient"] = showQuotient;
  exports["canonicalMod256"] = canonicalMod256;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.ByteString"] = $PS["Data.ByteString"] || {};
  var exports = $PS["Data.ByteString"];
  var $foreign = $PS["Data.ByteString"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Type_Quotient = $PS["Type.Quotient"];                
  var ByteString = function (x) {
      return x;
  };
  var unsafeThaw = function (v) {
      return v;
  };
  var unsafeFreeze = ByteString;
  var unpack = (function () {
      var $26 = Node_Buffer_Class.toArray(Node_Buffer.mutableBufferEffect);
      return function ($27) {
          return Effect_Unsafe.unsafePerformEffect($26(unsafeThaw($27)));
      };
  })();
  var toString = function (s) {
      return function (e) {
          return Effect_Unsafe.unsafePerformEffect(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(e)(unsafeThaw(s)));
      };
  };
  var showByteString = new Data_Show.Show(function (bs) {
      return "(pack " + (Data_Show.show(Data_Show.showArray(Type_Quotient.showQuotient(Data_Show.showInt)(Type_Quotient.canonicalMod256)))(unpack(bs)) + ")");
  });
  var semigroupByteString = new Data_Semigroup.Semigroup(function (a) {
      return function (b) {
          return unsafeFreeze(Effect_Unsafe.unsafePerformEffect(Node_Buffer_Class.concat(Node_Buffer.mutableBufferEffect)([ unsafeThaw(a), unsafeThaw(b) ])));
      };
  });
  var pack = (function () {
      var $28 = Node_Buffer_Class.fromArray(Node_Buffer.mutableBufferEffect);
      var $29 = Data_Functor.map(Data_Functor.functorArray)(Type_Quotient.runQuotient(Type_Quotient.canonicalMod256));
      return function ($30) {
          return unsafeFreeze(Effect_Unsafe.unsafePerformEffect($28($29($30))));
      };
  })();
  var singleton = (function () {
      var $32 = Control_Applicative.pure(Control_Applicative.applicativeArray);
      return function ($33) {
          return pack($32($33));
      };
  })();
  var uncons = function (bs) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.uncons(unpack(bs)))(function (v) {
          return {
              head: v.head,
              tail: pack(v.tail)
          };
      });
  };
  var tail = (function () {
      var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      });
      return function ($35) {
          return $34(uncons($35));
      };
  })();        
  var map = function (f) {
      var $36 = Data_Functor.map(Data_Functor.functorArray)(f);
      return function ($37) {
          return pack($36(unpack($37)));
      };
  };
  var length = (function () {
      var $38 = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect);
      return function ($39) {
          return Effect_Unsafe.unsafePerformEffect($38(unsafeThaw($39)));
      };
  })();
  var index = function (b) {
      return function (i) {
          return Effect_Unsafe.unsafePerformEffect($foreign.realGetAtOffset(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(i)(unsafeThaw(b)));
      };
  };
  var head = function (v) {
      return index(v)(0);
  };                                                                    
  var fromString = function (s) {
      return function (e) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeFreeze)(Effect_Unsafe.unsafePerformEffect(Effect_Exception.catchException(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value)))(Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(s)(e)))));
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["length"] = length;
  exports["fromString"] = fromString;
  exports["toString"] = toString;
  exports["semigroupByteString"] = semigroupByteString;
  exports["showByteString"] = showByteString;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  var $75 = unwrap(dictNewtype1);
                  var $76 = wrap(dictNewtype);
                  return function ($77) {
                      return $75(f($76($77)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["under"] = under;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                   
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["take"] = take;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT((function () {
          var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
          return function ($3) {
              return Data_Identity.Identity(f($2($3)));
          };
      })());
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                                        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [ v.constructor.name ]);
  });
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };                                            
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = (function () {
          var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
          return function ($110) {
              return $109(Data_Int.fromNumber($110));
          };
      })();
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["readString"] = readString;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Constructor = function (x) {
      return x;
  };
  var Argument = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
  exports["Argument"] = Argument;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  var index = function (dict) {
      return dict.index;
  }; 
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                        
  var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  exports["readProp"] = readProp;
  exports["index"] = index;
  exports["indexString"] = indexString;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Generic.Class"] = $PS["Foreign.Generic.Class"] || {};
  var exports = $PS["Foreign.Generic.Class"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  var GenericEncodeArgs = function (encodeArgs) {
      this.encodeArgs = encodeArgs;
  };
  var GenericEncode = function (encodeOpts) {
      this.encodeOpts = encodeOpts;
  };
  var GenericDecodeArgs = function (decodeArgs) {
      this.decodeArgs = decodeArgs;
  };
  var GenericDecode = function (decodeOpts) {
      this.decodeOpts = decodeOpts;
  };
  var GenericCountArgs = function (countArgs) {
      this.countArgs = countArgs;
  };
  var EncodeWithOptions = function (encodeWithOptions) {
      this.encodeWithOptions = encodeWithOptions;
  };
  var EncodeRecord = function (encodeRecordWithOptions) {
      this.encodeRecordWithOptions = encodeRecordWithOptions;
  };
  var Encode = function (encode) {
      this.encode = encode;
  };
  var DecodeWithOptions = function (decodeWithOptions) {
      this.decodeWithOptions = decodeWithOptions;
  };
  var DecodeRecord = function (decodeRecordWithOptions) {
      this.decodeRecordWithOptions = decodeRecordWithOptions;
  };
  var Decode = function (decode) {
      this.decode = decode;
  }; 
  var stringEncode = new Encode(Foreign.unsafeToForeign);
  var stringDecode = new Decode(Foreign.readString);
  var intEncode = new Encode(Foreign.unsafeToForeign);
  var intDecode = new Decode(Foreign.readInt);
  var genericEncodeArgsNoArguments = new GenericEncodeArgs(function (v) {
      return Data_Monoid.mempty(Data_Monoid.monoidFn(Data_List_Types.monoidList));
  });
  var genericDecodeArgsNoArguments = new GenericDecodeArgs(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_List_Types.Nil) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      result: Data_Generic_Rep.NoArguments.value,
                      rest: Data_List_Types.Nil.value,
                      next: v1
                  });
              };
              return Foreign.fail(new Foreign.ForeignError("Too many constructor arguments"));
          };
      };
  });
  var genericCountArgsNoArguments = new GenericCountArgs(function (v) {
      return new Data_Either.Left(Data_Generic_Rep.NoArguments.value);
  });
  var genericCountArgsArgument = new GenericCountArgs(function (v) {
      return new Data_Either.Right(1);
  });
  var foreignEncode = new Encode(Control_Category.identity(Control_Category.categoryFn));                                              
  var encodeWithOptions = function (dict) {
      return dict.encodeWithOptions;
  };
  var genericEncodeArgsArgument = function (dictEncodeWithOptions) {
      return new GenericEncodeArgs(function (opts) {
          return function (v) {
              return Data_List.singleton(encodeWithOptions(dictEncodeWithOptions)(opts)(v));
          };
      });
  };
  var encodeRecordWithOptions = function (dict) {
      return dict.encodeRecordWithOptions;
  };
  var encodeWithOptionsRecord = function (dictRowToList) {
      return function (dictEncodeRecord) {
          return new EncodeWithOptions(function (opts) {
              var $148 = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts);
              return function ($149) {
                  return Foreign.unsafeToForeign($148($149));
              };
          });
      };
  };
  var encodeRecordNil = new EncodeRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return Foreign_Object.empty;
          };
      };
  });
  var encodeRecordCons = function (dictCons) {
      return function (dictEncodeRecord) {
          return function (dictIsSymbol) {
              return function (dictEncodeWithOptions) {
                  return new EncodeRecord(function (v) {
                      return function (opts) {
                          return function (rec) {
                              var obj = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(rec);
                              var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              return Foreign_Object.insert(opts.fieldTransform(l))(encodeWithOptions(dictEncodeWithOptions)(opts)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rec)))(obj);
                          };
                      };
                  });
              };
          };
      };
  };
  var encodeOpts = function (dict) {
      return dict.encodeOpts;
  }; 
  var genericEncodeSum = function (dictGenericEncode) {
      return function (dictGenericEncode1) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return encodeOpts(dictGenericEncode)({
                          sumEncoding: opts.sumEncoding,
                          unwrapSingleConstructors: false,
                          unwrapSingleArguments: opts.unwrapSingleArguments,
                          fieldTransform: opts.fieldTransform
                      })(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return encodeOpts(dictGenericEncode1)({
                          sumEncoding: opts.sumEncoding,
                          unwrapSingleConstructors: false,
                          unwrapSingleArguments: opts.unwrapSingleArguments,
                          fieldTransform: opts.fieldTransform
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Foreign.Generic.Class (line 351, column 1 - line 355, column 85): " + [ opts.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var encodeArgs = function (dict) {
      return dict.encodeArgs;
  };
  var genericEncodeConstructor = function (dictIsSymbol) {
      return function (dictGenericEncodeArgs) {
          return new GenericEncode(function (opts) {
              return function (v) {
                  var unwrapArguments = function (v1) {
                      if (v1.length === 0) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v1.length === 1 && opts.unwrapSingleArguments) {
                          return new Data_Maybe.Just(v1[0]);
                      };
                      return new Data_Maybe.Just(Foreign.unsafeToForeign(v1));
                  };
                  var encodeArgsArray = (function () {
                      var $150 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
                      var $151 = encodeArgs(dictGenericEncodeArgs)(opts);
                      return function ($152) {
                          return unwrapArguments($150($151($152)));
                      };
                  })();
                  var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  if (opts.unwrapSingleConstructors) {
                      return Data_Maybe.maybe(Foreign.unsafeToForeign({}))(Foreign.unsafeToForeign)(encodeArgsArray(v));
                  };
                  return Foreign.unsafeToForeign(Foreign_Object.union(Foreign_Object.singleton(opts.sumEncoding.value0.tagFieldName)(Foreign.unsafeToForeign(opts.sumEncoding.value0.constructorTagTransform(ctorName))))(Data_Maybe.maybe(Foreign_Object.empty)(Foreign_Object.singleton(opts.sumEncoding.value0.contentsFieldName))(encodeArgsArray(v))));
              };
          });
      };
  };
  var encode = function (dict) {
      return dict.encode;
  };
  var encodeWithOptionsOther = function (dictEncode) {
      return new EncodeWithOptions(function (v) {
          return encode(dictEncode);
      });
  };
  var objectEncode = function (dictEncode) {
      return new Encode((function () {
          var $156 = Foreign_Object.mapWithKey(function (v) {
              return encode(dictEncode);
          });
          return function ($157) {
              return Foreign.unsafeToForeign($156($157));
          };
      })());
  };
  var defaultOptions = {
      sumEncoding: new TaggedObject({
          tagFieldName: "tag",
          contentsFieldName: "contents",
          constructorTagTransform: Control_Category.identity(Control_Category.categoryFn)
      }),
      unwrapSingleConstructors: false,
      unwrapSingleArguments: true,
      fieldTransform: Control_Category.identity(Control_Category.categoryFn)
  };
  var decodeWithOptions = function (dict) {
      return dict.decodeWithOptions;
  };
  var genericDecodeArgsArgument = function (dictDecodeWithOptions) {
      return new GenericDecodeArgs(function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(v1))))(decodeWithOptions(dictDecodeWithOptions)(v)(v2.value0)))(function (a) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                              result: a,
                              rest: v2.value1,
                              next: v1 + 1 | 0
                          });
                      });
                  };
                  return Foreign.fail(new Foreign.ForeignError("Not enough constructor arguments"));
              };
          };
      });
  };
  var decodeRecordWithOptions = function (dict) {
      return dict.decodeRecordWithOptions;
  };
  var decodeWithOptionsRecord = function (dictRowToList) {
      return function (dictDecodeRecord) {
          return new DecodeWithOptions(function (opts) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({})))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts));
          });
      };
  };
  var decodeRecordNil = new DecodeRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
          };
      };
  });
  var decodeRecordCons = function (dictCons) {
      return function (dictDecodeRecord) {
          return function (dictIsSymbol) {
              return function (dictDecodeWithOptions) {
                  return function (dictLacks) {
                      return new DecodeRecord(function (v) {
                          return function (opts) {
                              return function (f) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(f))(function (builder) {
                                      var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                      var l_transformed = opts.fieldTransform(l);
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(l_transformed))(function (f_) {
                                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(l_transformed))))(decodeWithOptions(dictDecodeWithOptions)(opts)(f_)))(function (a) {
                                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(builder)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(a)));
                                          });
                                      });
                                  });
                              };
                          };
                      });
                  };
              };
          };
      };
  };
  var decodeOpts = function (dict) {
      return dict.decodeOpts;
  };
  var genericDecodeSum = function (dictGenericDecode) {
      return function (dictGenericDecode1) {
          return new GenericDecode(function (opts) {
              return function (f) {
                  var opts$prime = {
                      unwrapSingleConstructors: false,
                      fieldTransform: opts.fieldTransform,
                      sumEncoding: opts.sumEncoding,
                      unwrapSingleArguments: opts.unwrapSingleArguments
                  };
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inl.create)(decodeOpts(dictGenericDecode)(opts$prime)(f)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inr.create)(decodeOpts(dictGenericDecode1)(opts$prime)(f)));
              };
          });
      };
  };
  var decodeArgs = function (dict) {
      return dict.decodeArgs;
  };
  var decode = function (dict) {
      return dict.decode;
  };
  var decodeWithOptionsOther = function (dictDecode) {
      return new DecodeWithOptions(function (v) {
          return decode(dictDecode);
      });
  };
  var countArgs = function (dict) {
      return dict.countArgs;
  };
  var genericDecodeConstructor = function (dictIsSymbol) {
      return function (dictGenericDecodeArgs) {
          return function (dictGenericCountArgs) {
              return new GenericDecode(function (opts) {
                  return function (f) {
                      var numArgs = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
                      var readArguments = function (args) {
                          if (numArgs instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(numArgs.value0);
                          };
                          if (numArgs instanceof Data_Either.Right && (numArgs.value0 === 1 && opts.unwrapSingleArguments)) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.singleton(args)))(function (v) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Foreign.fail(new Foreign.ForeignError("Expected a single argument"))))(function () {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                  });
                              });
                          };
                          if (numArgs instanceof Data_Either.Right) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(args))(function (vals) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.fromFoldable(Data_Foldable.foldableArray)(vals)))(function (v) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showInt)(numArgs.value0) + " constructor arguments")))))(function () {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Foreign.Generic.Class (line 307, column 9 - line 319, column 24): " + [ numArgs.constructor.name ]);
                      };
                      var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      if (opts.unwrapSingleConstructors) {
                          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(readArguments(f));
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.tagFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.tagFieldName))(Foreign.readString))(function (tag) {
                          var expected = opts.sumEncoding.value0.constructorTagTransform(ctorName);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(tag === expected)(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showString)(expected) + " tag")))))(function () {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(tag);
                          });
                      })))(function (tag) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.contentsFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.contentsFieldName))(readArguments)))(function (args) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(args);
                          });
                      });
                  };
              });
          };
      };
  };
  var arrayDecode = function (dictDecode) {
      return new Decode((function () {
          var readElement = function (i) {
              return function (value) {
                  return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i))))(decode(dictDecode)(value));
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray)(readElements);
      })());
  };
  exports["decode"] = decode;
  exports["decodeOpts"] = decodeOpts;
  exports["encode"] = encode;
  exports["encodeOpts"] = encodeOpts;
  exports["defaultOptions"] = defaultOptions;
  exports["Decode"] = Decode;
  exports["Encode"] = Encode;
  exports["stringDecode"] = stringDecode;
  exports["intDecode"] = intDecode;
  exports["arrayDecode"] = arrayDecode;
  exports["foreignEncode"] = foreignEncode;
  exports["stringEncode"] = stringEncode;
  exports["intEncode"] = intEncode;
  exports["objectEncode"] = objectEncode;
  exports["decodeWithOptionsRecord"] = decodeWithOptionsRecord;
  exports["decodeWithOptionsOther"] = decodeWithOptionsOther;
  exports["encodeWithOptionsRecord"] = encodeWithOptionsRecord;
  exports["encodeWithOptionsOther"] = encodeWithOptionsOther;
  exports["decodeRecordNil"] = decodeRecordNil;
  exports["encodeRecordNil"] = encodeRecordNil;
  exports["decodeRecordCons"] = decodeRecordCons;
  exports["encodeRecordCons"] = encodeRecordCons;
  exports["genericDecodeConstructor"] = genericDecodeConstructor;
  exports["genericEncodeConstructor"] = genericEncodeConstructor;
  exports["genericDecodeSum"] = genericDecodeSum;
  exports["genericEncodeSum"] = genericEncodeSum;
  exports["genericDecodeArgsNoArguments"] = genericDecodeArgsNoArguments;
  exports["genericEncodeArgsNoArguments"] = genericEncodeArgsNoArguments;
  exports["genericDecodeArgsArgument"] = genericDecodeArgsArgument;
  exports["genericEncodeArgsArgument"] = genericEncodeArgsArgument;
  exports["genericCountArgsNoArguments"] = genericCountArgsNoArguments;
  exports["genericCountArgsArgument"] = genericCountArgsArgument;
})(PS);
(function(exports) {
  "use strict";
  var BigNumber =require("bn.js"); 

  //NOTE: According to the documentation, many binary operators can take a normal js Number
  //by suffixing the version for BN with 'n'.

  exports._intToBigNumber = function(value) {
    return new BigNumber(value.toString(10), 10);
  };

  exports._eqBigNumber = function(n) {
      return function(m) { return m.eq(n); };
  };

  exports._addBigNumber = function(n) {
      return function (m) { return n.add(m); };
  };

  exports._mulBigNumber = function(n) {
      return function (m) { return n.mul(m); };
  };

  exports._subBigNumber = function(n) {
      return function (m) { return n.sub(m); };
  };

  exports._divBigNumber = function(n) {
    return function (m) { return n.div(m); }
  }

  exports._modBigNumber = function(n) {
    return function(m) { return n.mod(m); }
  }

  exports.comparedTo = function (a) {
    return function (b) {
      return a.cmp(b);
    };
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
        return function (s) {
          try {
            if (radix === 16 && (s.indexOf('0x') === 0 || s.indexOf('-0x') === 0)) {
              s = s.replace('0x','')
            }
            if (pattern.test(s)) {
              return just(new BigNumber(s, radix))
            } else {
              return nothing;
            }
          } catch (_) {
            return nothing;
          }
        };
      };
    };
  };

  exports.toString = function (radix) {
    return function (bn) { return bn.toString(radix); };
  };

  exports.toTwosComplement = function (bn) {
    if (bn.ltn(0)) {
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).add(bn).addn(1);
    } else {
      return bn;
    }
  };

  exports.pow = function(n) {
      return function (m) {
          var exp = new BigNumber(m, 10);
          return n.pow(exp);
      };
  };

  exports.toNumber = function (n) {
      var newN = new BigNumber(n);
      return newN.toNumber();
  };
})(PS["Network.Ethereum.Core.BigNumber"] = PS["Network.Ethereum.Core.BigNumber"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring.Module"] = $PS["Data.Ring.Module"] || {};
  var exports = $PS["Data.Ring.Module"];           
  var RightModule = function (Ring0, maddR, mmulR, msubR, mzeroR) {
      this.Ring0 = Ring0;
      this.maddR = maddR;
      this.mmulR = mmulR;
      this.msubR = msubR;
      this.mzeroR = mzeroR;
  };
  var LeftModule = function (Ring0, maddL, mmulL, msubL, mzeroL) {
      this.Ring0 = Ring0;
      this.maddL = maddL;
      this.mmulL = mmulL;
      this.msubL = msubL;
      this.mzeroL = mzeroL;
  };
  exports["LeftModule"] = LeftModule;
  exports["RightModule"] = RightModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Core.BigNumber"] = $PS["Network.Ethereum.Core.BigNumber"] || {};
  var exports = $PS["Network.Ethereum.Core.BigNumber"];
  var $foreign = $PS["Network.Ethereum.Core.BigNumber"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Ring_Module = $PS["Data.Ring.Module"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Algebra = function (LeftModule2, RightModule3, Ring0, Ring1, embed) {
      this.LeftModule2 = LeftModule2;
      this.RightModule3 = RightModule3;
      this.Ring0 = Ring0;
      this.Ring1 = Ring1;
      this.embed = embed;
  };
  var unsafeToInt = function ($5) {
      return Data_Int.floor($foreign.toNumber($5));
  };
  var showBigNumber = new Data_Show.Show($foreign.toString(Data_Int.decimal));
  var parseBigNumber = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var eqBigNumber = new Data_Eq.Eq($foreign["_eqBigNumber"]);
  var ordBigNumber = new Data_Ord.Ord(function () {
      return eqBigNumber;
  }, function (bn1) {
      return function (bn2) {
          var n = $foreign.comparedTo(bn1)(bn2);
          if (n === 0) {
              return Data_Ordering.EQ.value;
          };
          if (n === 1) {
              return Data_Ordering.GT.value;
          };
          return Data_Ordering.LT.value;
      };
  });
  var embedInt = $foreign["_intToBigNumber"];
  var semiringBigNumber = new Data_Semiring.Semiring($foreign["_addBigNumber"], $foreign["_mulBigNumber"], embedInt(1), embedInt(0));
  var ringBigNumber = new Data_Ring.Ring(function () {
      return semiringBigNumber;
  }, $foreign["_subBigNumber"]);
  var embed = function (dict) {
      return dict.embed;
  };
  var commutativeRingBigNumber = new Data_CommutativeRing.CommutativeRing(function () {
      return ringBigNumber;
  });
  var euclidianRingBigNumber = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingBigNumber;
  }, function (v) {
      return 1;
  }, $foreign["_divBigNumber"], $foreign["_modBigNumber"]);
  var bigNumberRModule = new Data_Ring_Module.RightModule(function () {
      return Data_Ring.ringInt;
  }, Data_Semiring.add(semiringBigNumber), function (a) {
      return function (b) {
          return Data_Semiring.mul(semiringBigNumber)(a)(embedInt(b));
      };
  }, Data_Ring.sub(ringBigNumber), embedInt(0));
  var bigNumberLModule = new Data_Ring_Module.LeftModule(function () {
      return Data_Ring.ringInt;
  }, Data_Semiring.add(semiringBigNumber), function (a) {
      return function (b) {
          return Data_Semiring.mul(semiringBigNumber)(embedInt(a))(b);
      };
  }, Data_Ring.sub(ringBigNumber), embedInt(0));
  var embedInt$prime = new Algebra(function () {
      return bigNumberLModule;
  }, function () {
      return bigNumberRModule;
  }, function () {
      return Data_Ring.ringInt;
  }, function () {
      return ringBigNumber;
  }, embedInt);
  var _encode = (function () {
      var $6 = Data_Semigroup.append(Data_Semigroup.semigroupString)("0x");
      var $7 = $foreign.toString(Data_Int.hexadecimal);
      return function ($8) {
          return $6($7($8));
      };
  })();
  var encodeBigNumber = new Foreign_Generic_Class.Encode((function () {
      var $9 = Foreign_Generic_Class.encode(Foreign_Generic_Class.stringEncode);
      return function ($10) {
          return $9(_encode($10));
      };
  })());
  var _decode = function (str) {
      var v = parseBigNumber(Data_Int.hexadecimal)(str);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Failed to parse as BigNumber: " + str);
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.BigNumber (line 137, column 15 - line 139, column 20): " + [ v.constructor.name ]);
  };
  var decodeBigNumber = new Foreign_Generic_Class.Decode(function (x) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readString(x))(function (str) {
          return Data_Either.either(function ($13) {
              return Foreign.fail(Foreign.ForeignError.create($13));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(_decode(str));
      });
  });                                                                                             
  var decodeJsonBigNumber = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json))(function (str) {
          return Data_Either.either(Data_Function["const"](Data_Either.Left.create(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Either.Right.create)(_decode(str));
      });
  });
  exports["embed"] = embed;
  exports["parseBigNumber"] = parseBigNumber;
  exports["unsafeToInt"] = unsafeToInt;
  exports["showBigNumber"] = showBigNumber;
  exports["eqBigNumber"] = eqBigNumber;
  exports["ordBigNumber"] = ordBigNumber;
  exports["semiringBigNumber"] = semiringBigNumber;
  exports["ringBigNumber"] = ringBigNumber;
  exports["euclidianRingBigNumber"] = euclidianRingBigNumber;
  exports["embedInt'"] = embedInt$prime;
  exports["decodeBigNumber"] = decodeBigNumber;
  exports["encodeBigNumber"] = encodeBigNumber;
  exports["decodeJsonBigNumber"] = decodeJsonBigNumber;
  exports["pow"] = $foreign.pow;
  exports["toString"] = $foreign.toString;
  exports["toTwosComplement"] = $foreign.toTwosComplement;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $112 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($113) {
                  return $112(f($113));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
  var exports = $PS["Data.String.Pattern"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Pattern = function (x) {
      return x;
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  exports["newtypePattern"] = newtypePattern;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $90 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      var $91 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($92) {
          return $90($91($92));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };                            
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["fail"] = fail;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["functorParserT"] = functorParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var eof = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
          });
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  exports["eof"] = eof;
  exports["anyChar"] = anyChar;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Core.HexString"] = $PS["Network.Ethereum.Core.HexString"] || {};
  var exports = $PS["Network.Ethereum.Core.HexString"];
  var $foreign = $PS["Network.Ethereum.Core.HexString"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var Pos = (function () {
      function Pos() {

      };
      Pos.value = new Pos();
      return Pos;
  })();
  var Neg = (function () {
      function Neg() {

      };
      Neg.value = new Neg();
      return Neg;
  })();
  var Signed = (function () {
      function Signed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Signed.create = function (value0) {
          return function (value1) {
              return new Signed(value0, value1);
          };
      };
      return Signed;
  })();
  var HexString = function (x) {
      return x;
  };
  var unHex = function (v) {
      return v;
  };
  var toByteString = function (hx) {
      return Data_Maybe.fromJust()(Data_ByteString.fromString(unHex(hx))(Node_Encoding.Hex.value));
  };
  var takeHex = function (n) {
      return function (v) {
          return HexString(Data_String_CodePoints.take(n)(v));
      };
  };
  var stringLikeHexString = Text_Parsing_Parser_String.stringLikeString;
  var showHexString = new Data_Show.Show(function (v) {
      return "0x" + v;
  });
  var semigpStringEq = Data_Semigroup.semigroupString;                              
  var monoidStringEq = Data_Monoid.monoidString;
  var mkHexString = function (str) {
      if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_String_CodePoints.length(str))(2) !== 0) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          var hexAlph = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordChar)(Data_String_CodeUnits.toCharArray("0123456789abcdefABCDEF"));
          var go = function ($copy_s) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(s) {
                  var v = Data_Array.uncons(s);
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var $42 = Data_Set.member(Data_Ord.ordChar)(v.value0.head)(hexAlph);
                      if ($42) {
                          $copy_s = v.value0.tail;
                          return;
                      };
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 143, column 16 - line 148, column 27): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_s);
              };
              return $tco_result;
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(HexString)((function () {
              var v = Data_String_CodeUnits.stripPrefix("0x")(str);
              if (v instanceof Data_Maybe.Nothing) {
                  var $47 = Data_Maybe.isJust(go(Data_String_CodeUnits.toCharArray(str)));
                  if ($47) {
                      return Data_Maybe.Just.create(Data_String_Common.toLower(str));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var $48 = Data_Maybe.isJust(go(Data_String_CodeUnits.toCharArray(v.value0)));
                  if ($48) {
                      return Data_Maybe.Just.create(Data_String_Common.toLower(v.value0));
                  };
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 134, column 7 - line 140, column 35): " + [ v.constructor.name ]);
          })());
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 130, column 1 - line 130, column 41): " + [ str.constructor.name ]);
  };
  var toSignedHexString = function (bn) {
      var sgn = (function () {
          var $50 = Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(bn)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber));
          if ($50) {
              return Neg.value;
          };
          return Pos.value;
      })();
      var rawStr = Network_Ethereum_Core_BigNumber.toString(Data_Int.hexadecimal)(bn);
      var str = Data_Maybe.fromJust()(mkHexString((function () {
          var $51 = Data_Int.even(Data_String_CodePoints.length(rawStr));
          if ($51) {
              return rawStr;
          };
          return "0" + rawStr;
      })()));
      return new Signed(sgn, str);
  };                                    
  var hexStringEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String_Common.toLower(v) === Data_String_Common.toLower(v1);
      };
  });
  var hexLength = function (v) {
      return Data_String_CodePoints.length(v);
  };
  var getPadLength = function (len) {
      var n = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(len)(64);
      var $62 = n === 0;
      if ($62) {
          return 0;
      };
      return 64 - n | 0;
  };
  var fromByteString = function (bs) {
      return Data_Maybe.fromJust()(mkHexString(Data_ByteString.toString(bs)(Node_Encoding.Hex.value)));
  };
  var eqSign = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Pos && y instanceof Pos) {
              return true;
          };
          if (x instanceof Neg && y instanceof Neg) {
              return true;
          };
          return false;
      };
  });
  var padLeftSigned = function (v) {
      var sgn = (function () {
          var $72 = Data_Eq.eq(eqSign)(v.value0)(Pos.value);
          if ($72) {
              return "0";
          };
          return "f";
      })();
      var padLength = getPadLength(hexLength(v.value1));
      var padding = Data_Maybe.fromJust()(mkHexString(Data_String_CodeUnits.fromCharArray(Data_Array.replicate(padLength)(sgn))));
      return Data_Semigroup.append(semigpStringEq)(padding)(v.value1);
  };
  var padRightSigned = function (v) {
      var sgn = (function () {
          var $76 = Data_Eq.eq(eqSign)(v.value0)(Pos.value);
          if ($76) {
              return "0";
          };
          return "f";
      })();
      var padLength = getPadLength(hexLength(v.value1));
      var padding = Data_Maybe.fromJust()(mkHexString(Data_String_CodeUnits.fromCharArray(Data_Array.replicate(padLength)(sgn))));
      return Data_Semigroup.append(semigpStringEq)(v.value1)(padding);
  };
  var dropHex = function (n) {
      return function (v) {
          return HexString(Data_String_CodePoints.drop(n)(v));
      };
  };
  var asSigned = function (a) {
      return new Signed(Pos.value, a);
  };
  var padLeft = function ($89) {
      return padLeftSigned(asSigned($89));
  };
  var padRight = function ($90) {
      return padRightSigned(asSigned($90));
  };
  var _encode = (function () {
      var $91 = Data_Semigroup.append(Data_Semigroup.semigroupString)("0x");
      return function ($92) {
          return $91(unHex($92));
      };
  })();
  var encodeHexString = new Foreign_Generic_Class.Encode((function () {
      var $93 = Foreign_Generic_Class.encode(Foreign_Generic_Class.stringEncode);
      return function ($94) {
          return $93(_encode($94));
      };
  })());
  var _decode = function (str) {
      var v = mkHexString(str);
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Failed to parse as HexString: " + str);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 101, column 15 - line 103, column 60): " + [ v.constructor.name ]);
  };
  var decodeHexString = new Foreign_Generic_Class.Decode(function (s) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Generic_Class.decode(Foreign_Generic_Class.stringDecode)(s))(function (str) {
          return Data_Either.either(function ($97) {
              return Foreign.fail(Foreign.ForeignError.create($97));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(_decode(str));
      });
  });                                                                                             
  var decodeJsonHexString = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json))(function (str) {
          return Data_Either.either(Data_Function["const"](Data_Either.Left.create(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Either.Right.create)(_decode(str));
      });
  });
  exports["mkHexString"] = mkHexString;
  exports["unHex"] = unHex;
  exports["hexLength"] = hexLength;
  exports["dropHex"] = dropHex;
  exports["takeHex"] = takeHex;
  exports["padLeftSigned"] = padLeftSigned;
  exports["padLeft"] = padLeft;
  exports["padRight"] = padRight;
  exports["toSignedHexString"] = toSignedHexString;
  exports["toByteString"] = toByteString;
  exports["fromByteString"] = fromByteString;
  exports["showHexString"] = showHexString;
  exports["hexStringEq"] = hexStringEq;
  exports["semigpStringEq"] = semigpStringEq;
  exports["monoidStringEq"] = monoidStringEq;
  exports["stringLikeHexString"] = stringLikeHexString;
  exports["decodeHexString"] = decodeHexString;
  exports["encodeHexString"] = encodeHexString;
  exports["decodeJsonHexString"] = decodeJsonHexString;
  exports["toBigNumber"] = $foreign.toBigNumber;
  exports["toBigNumberFromSignedHexString"] = $foreign.toBigNumberFromSignedHexString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Language.Solidity.Compiler.Types.Output"] = $PS["Language.Solidity.Compiler.Types.Output"] || {};
  var exports = $PS["Language.Solidity.Compiler.Types.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var LinkReference = (function () {
      function LinkReference(value0) {
          this.value0 = value0;
      };
      LinkReference.create = function (value0) {
          return new LinkReference(value0);
      };
      return LinkReference;
  })();
  var BytecodeHexString = (function () {
      function BytecodeHexString(value0) {
          this.value0 = value0;
      };
      BytecodeHexString.create = function (value0) {
          return new BytecodeHexString(value0);
      };
      return BytecodeHexString;
  })();
  var BytecodeUnlinked = (function () {
      function BytecodeUnlinked(value0) {
          this.value0 = value0;
      };
      BytecodeUnlinked.create = function (value0) {
          return new BytecodeUnlinked(value0);
      };
      return BytecodeUnlinked;
  })();              
  var mkBytecodeObject = function (s) {
      return Data_Maybe.maybe(new BytecodeUnlinked(s))(BytecodeHexString.create)(Network_Ethereum_Core_HexString.mkHexString(s));
  };                                                                                                                                    
  var decodeJsonLinkReference = new Data_Argonaut_Decode_Class.DecodeJson(function (j) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(j))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(o)("start"))(function (start) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(o)("length"))(function (length) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new LinkReference({
                      start: start,
                      length: length
                  }));
              });
          });
      });
  });
  var decodeJsonBytecodeObject = new Data_Argonaut_Decode_Class.DecodeJson((function () {
      var $334 = Data_Functor.map(Data_Either.functorEither)(mkBytecodeObject);
      var $335 = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString);
      return function ($336) {
          return $334($335($336));
      };
  })());
  exports["BytecodeHexString"] = BytecodeHexString;
  exports["decodeJsonBytecodeObject"] = decodeJsonBytecodeObject;
  exports["decodeJsonLinkReference"] = decodeJsonLinkReference;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Types.Bytecode"] = $PS["Chanterelle.Internal.Types.Bytecode"] || {};
  var exports = $PS["Chanterelle.Internal.Types.Bytecode"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Either = $PS["Data.Either"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Language_Solidity_Compiler_Types_Output = $PS["Language.Solidity.Compiler.Types.Output"];  
  var BCLinked = (function () {
      function BCLinked(value0) {
          this.value0 = value0;
      };
      BCLinked.create = function (value0) {
          return new BCLinked(value0);
      };
      return BCLinked;
  })();
  var BCUnlinked = (function () {
      function BCUnlinked(value0) {
          this.value0 = value0;
      };
      BCUnlinked.create = function (value0) {
          return new BCUnlinked(value0);
      };
      return BCUnlinked;
  })();
  var decodeJsonBytecode = new Data_Argonaut_Decode_Class.DecodeJson(function (o) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Language_Solidity_Compiler_Types_Output.decodeJsonBytecodeObject)(obj)("object"))(function (rawBytecode) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.defaultField(Data_Argonaut_Decode_Combinators.getFieldOptional(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeArray(Language_Solidity_Compiler_Types_Output.decodeJsonLinkReference)))(obj)("linkReferences"))(Foreign_Object.empty))(function (linkReferences) {
                  if (rawBytecode instanceof Language_Solidity_Compiler_Types_Output.BytecodeHexString) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new BCLinked({
                          bytecode: rawBytecode.value0,
                          linkReferences: linkReferences
                      }));
                  };
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.defaultField(Data_Argonaut_Decode_Combinators.getFieldOptional(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeArray(Language_Solidity_Compiler_Types_Output.decodeJsonLinkReference)))(obj)("remainingLinkReferences"))(linkReferences))(function (remainingLinkReferences) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new BCUnlinked({
                          rawBytecode: rawBytecode,
                          linkReferences: linkReferences,
                          remainingLinkReferences: remainingLinkReferences
                      }));
                  });
              });
          });
      });
  });
  exports["decodeJsonBytecode"] = decodeJsonBytecode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var Index = function (ix) {
      this.ix = ix;
  }; 
  var indexForeignObject = new Index(function (k) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (coalg) {
                  return function (m) {
                      return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))((function () {
                          var $47 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                              return Foreign_Object.insert(k)(v)(m);
                          });
                          return function ($48) {
                              return $47(coalg($48));
                          };
                      })())(Foreign_Object.lookup(k)(m));
                  };
              };
          });
      };
  });
  exports["indexForeignObject"] = indexForeignObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
  exports["lens'"] = lens$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.At"] = $PS["Data.Lens.At"] || {};
  var exports = $PS["Data.Lens.At"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atForeignObject = new At(function () {
      return Data_Lens_Index.indexForeignObject;
  }, function (k) {
      return function (dictStrong) {
          return Data_Lens_Lens.lens(Foreign_Object.lookup(k))(function (m) {
              return Data_Maybe.maybe(Foreign_Object["delete"](k)(m))(function (v) {
                  return Foreign_Object.insert(k)(v)(m);
              });
          })(dictStrong);
      };
  });
  var at = function (dict) {
      return dict.at;
  };
  exports["at"] = at;
  exports["atForeignObject"] = atForeignObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];                 
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  exports["right"] = right;
  exports["Choice"] = Choice;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Either = $PS["Data.Either"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["choiceForget"] = choiceForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  var to = function (f) {
      return function (p) {
          var $3 = Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p);
          return function ($4) {
              return $3(f($4));
          };
      };
  };
  exports["viewOn"] = viewOn;
  exports["to"] = to;
})(PS);
(function(exports) {
  const crypto = require('crypto');
  const secp256k1 = require('secp256k1');

  const apiVer = ((typeof secp256k1.ecdsaSign === 'function') && (typeof secp256k1.ecdsaRecover === 'function')) ? 4 : 3;

  const signFn =  (apiVer === 4) ? secp256k1.ecdsaSign : secp256k1.sign;
  const recoverFn = (apiVer === 4) ? secp256k1.ecdsaRecover : secp256k1.recover;

  if (signFn === undefined || recoverFn === undefined) {
      throw new Error("Unsupported version of secp256k1");
  } 

  // copied from ethereumjs-util
  exports.isValidPrivate = function (privateKey) {
      return secp256k1.privateKeyVerify(privateKey);
  };

  // copied from ethereumjs-util, but more flexible with chainId
  exports.ecSign = function (privateKey, msgHash) {
      var sig = signFn(msgHash, privateKey);
      var ret = {};
      ret.r = Buffer.from(sig.signature.slice(0, 32));
      ret.s = Buffer.from(sig.signature.slice(32, 64));
      switch (apiVer) {
          case 4:
              ret.v = sig.recid;
              break;
          default:
              ret.v = sig.recovery;
      }
      return ret;
  };

  // copied from ethereumjs-util
  exports.privateToPublic = function (privateKey) {
      // skip the type flag and use the X, Y points
      return Buffer.from(secp256k1.publicKeyCreate(privateKey, false).slice(1));
  };
})(PS["Network.Ethereum.Core.Signatures"] = PS["Network.Ethereum.Core.Signatures"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep.Show"] = $PS["Data.Generic.Rep.Show"] || {};
  var exports = $PS["Data.Generic.Rep.Show"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  "use strict";
  var keccak =require("keccak"); 

  exports._keccak256 = function (a) {
      return keccak('keccak256').update(a).digest();
  };
})(PS["Network.Ethereum.Core.Keccak256"] = PS["Network.Ethereum.Core.Keccak256"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Core.Keccak256"] = $PS["Network.Ethereum.Core.Keccak256"] || {};
  var exports = $PS["Network.Ethereum.Core.Keccak256"];
  var $foreign = $PS["Network.Ethereum.Core.Keccak256"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var Keccak256 = function (keccak256) {
      this.keccak256 = keccak256;
  };
  var keccak256ByteString = new Keccak256($foreign["_keccak256"]);
  var keccak256 = function (dict) {
      return dict.keccak256;
  };    
  var keccak256String = new Keccak256((function () {
      var $3 = keccak256(keccak256ByteString);
      var $4 = Data_Maybe.fromJust();
      var $5 = Data_Function.flip(Data_ByteString.fromString)(Node_Encoding.UTF8.value);
      return function ($6) {
          return $3($4($5($6)));
      };
  })());
  var toSelector = (function () {
      var $7 = Network_Ethereum_Core_HexString.takeHex(8);
      var $8 = keccak256(keccak256String);
      return function ($9) {
          return $7(Network_Ethereum_Core_HexString.fromByteString($8($9)));
      };
  })();
  exports["keccak256"] = keccak256;
  exports["toSelector"] = toSelector;
  exports["keccak256ByteString"] = keccak256ByteString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Core.Signatures"] = $PS["Network.Ethereum.Core.Signatures"] || {};
  var exports = $PS["Network.Ethereum.Core.Signatures"];
  var $foreign = $PS["Network.Ethereum.Core.Signatures"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = $PS["Network.Ethereum.Core.Keccak256"];
  var ChainId = function (x) {
      return x;
  };
  var Address = function (x) {
      return x;
  };
  var unAddress = function (v) {
      return v;
  };
  var signMessage = function (privateKey) {
      return function (message) {
          var v = $foreign.ecSign(privateKey, message);
          return {
              r: Network_Ethereum_Core_HexString.fromByteString(v.r),
              s: Network_Ethereum_Core_HexString.fromByteString(v.s),
              v: v.v
          };
      };
  };
  var mkPrivateKey = function (privateKey) {
      var privateKeyBS = Network_Ethereum_Core_HexString.toByteString(privateKey);
      var $53 = $foreign.isValidPrivate(privateKeyBS);
      if ($53) {
          return Data_Maybe.Just.create(privateKeyBS);
      };
      return Data_Maybe.Nothing.value;
  };
  var mkAddress = function (hx) {
      var $54 = Network_Ethereum_Core_HexString.hexLength(hx) === 40;
      if ($54) {
          return Data_Maybe.Just.create(Address(hx));
      };
      return Data_Maybe.Nothing.value;
  };
  var publicToAddress = function (v) {
      var addrHex = Network_Ethereum_Core_HexString.fromByteString(Network_Ethereum_Core_Keccak256.keccak256(Network_Ethereum_Core_Keccak256.keccak256ByteString)(v));
      return Data_Maybe.fromJust()(mkAddress(Network_Ethereum_Core_HexString.dropHex(24)(addrHex)));
  };
  var privateToAddress = function ($72) {
      return publicToAddress($foreign.privateToPublic($72));
  };
  var genericSignature = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showSignature = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericSignature)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "r";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "s";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "v";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Network_Ethereum_Core_HexString.showHexString))(Network_Ethereum_Core_HexString.showHexString))))(new Data_Symbol.IsSymbol(function () {
      return "Signature";
  }))));
  var encodeAddress = Network_Ethereum_Core_HexString.encodeHexString;                          
  var addressShow = Network_Ethereum_Core_HexString.showHexString;
  var addChainIdOffset = function (v) {
      return function (v1) {
          return {
              r: v1.r,
              s: v1.s,
              v: (v1.v + 35 | 0) + (2 * v | 0) | 0
          };
      };
  };
  var _decode = function (hx) {
      var v = mkAddress(hx);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Address must be 20 bytes long: " + Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(hx));
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.Signatures (line 116, column 14 - line 118, column 24): " + [ v.constructor.name ]);
  };
  var decodeAddress = new Foreign_Generic_Class.Decode(function (a) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Generic_Class.decode(Network_Ethereum_Core_HexString.decodeHexString)(a))(function (hxString) {
          return Data_Either.either(function ($75) {
              return Foreign.fail(Foreign.ForeignError.create($75));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(_decode(hxString));
      });
  });                                                                                         
  var decodeJsonAddress = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Network_Ethereum_Core_HexString.decodeJsonHexString)(json))(function (hxString) {
          return Data_Either.either(Data_Function["const"](Data_Either.Left.create(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Either.Right.create)(_decode(hxString));
      });
  });
  exports["mkPrivateKey"] = mkPrivateKey;
  exports["unAddress"] = unAddress;
  exports["mkAddress"] = mkAddress;
  exports["privateToAddress"] = privateToAddress;
  exports["signMessage"] = signMessage;
  exports["ChainId"] = ChainId;
  exports["addChainIdOffset"] = addChainIdOffset;
  exports["addressShow"] = addressShow;
  exports["encodeAddress"] = encodeAddress;
  exports["decodeAddress"] = decodeAddress;
  exports["decodeJsonAddress"] = decodeJsonAddress;
  exports["showSignature"] = showSignature;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Error.Util"] = $PS["Control.Error.Util"] || {};
  var exports = $PS["Control.Error.Util"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["hush"] = hush;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $74 = Control_Applicative.pure(dictApplicative);
          return function ($75) {
              return ReaderT(Data_Function["const"]($74($75)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, (function () {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $78 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($79) {
              return $77($78($79));
          };
      })());
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, (function () {
          var $86 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
          var $87 = Control_Monad_Error_Class.throwError(dictMonadThrow);
          return function ($88) {
              return $86($87($88));
          };
      })());
  };
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartialBecause = function (v) {
      return function (x) {
          return $foreign.unsafePartial(function (dictPartial) {
              return x();
          });
      };
  };
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafePartialBecause"] = unsafePartialBecause;
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $43 = Data_Functor["void"](Effect.functorEffect);
      return function ($44) {
          return $43(launchAff($44));
      };
  })();
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["attempt"] = attempt;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffExceptT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
          var $14 = liftAff(dictMonadAff);
          return function ($15) {
              return $13($14($15));
          };
      })());
  };
  var monadAffReader = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
      }, (function () {
          var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
          var $26 = liftAff(dictMonadAff);
          return function ($27) {
              return $25($26($27));
          };
      })());
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffExceptT"] = monadAffExceptT;
  exports["monadAffReader"] = monadAffReader;
})(PS);
(function(exports) {
  "use strict";

  exports.parseJSONImpl = function (str) {
    return JSON.parse(str);
  };
})(PS["Foreign.JSON"] = PS["Foreign.JSON"] || {});
(function(exports) {
  "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.JSON"] = $PS["Foreign.JSON"] || {};
  var exports = $PS["Foreign.JSON"];
  var $foreign = $PS["Foreign.JSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];                
  var parseJSON = (function () {
      var $0 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)((function () {
          var $3 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
          return function ($4) {
              return $3(Foreign.ForeignError.create(Effect_Exception.message($4)));
          };
      })());
      var $1 = Effect_Uncurried.runEffectFn1($foreign.parseJSONImpl);
      return function ($2) {
          return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($0(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"]($1($2))))));
      };
  })();
  exports["parseJSON"] = parseJSON;
})(PS);
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global.Unsafe"] = $PS["Global.Unsafe"] || {};
  var exports = $PS["Global.Unsafe"];
  var $foreign = $PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Generic"] = $PS["Foreign.Generic"] || {};
  var exports = $PS["Foreign.Generic"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Global_Unsafe = $PS["Global.Unsafe"];                
  var genericEncode = function (dictGeneric) {
      return function (dictGenericEncode) {
          return function (opts) {
              var $10 = Foreign_Generic_Class.encodeOpts(dictGenericEncode)(opts);
              var $11 = Data_Generic_Rep.from(dictGeneric);
              return function ($12) {
                  return $10($11($12));
              };
          };
      };
  };
  var genericEncodeJSON = function (dictGeneric) {
      return function (dictGenericEncode) {
          return function (opts) {
              var $13 = genericEncode(dictGeneric)(dictGenericEncode)(opts);
              return function ($14) {
                  return Global_Unsafe.unsafeStringify($13($14));
              };
          };
      };
  };
  var genericDecode = function (dictGeneric) {
      return function (dictGenericDecode) {
          return function (opts) {
              var $15 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.to(dictGeneric));
              var $16 = Foreign_Generic_Class.decodeOpts(dictGenericDecode)(opts);
              return function ($17) {
                  return $15($16($17));
              };
          };
      };
  };
  var genericDecodeJSON = function (dictGeneric) {
      return function (dictGenericDecode) {
          return function (opts) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(genericDecode(dictGeneric)(dictGenericDecode)(opts))(Foreign_JSON.parseJSON);
          };
      };
  };
  exports["genericDecode"] = genericDecode;
  exports["genericEncode"] = genericEncode;
  exports["genericDecodeJSON"] = genericDecodeJSON;
  exports["genericEncodeJSON"] = genericEncodeJSON;
})(PS);
(function(exports) {
                         

  exports['undefined'] = undefined;
})(PS["Foreign.NullOrUndefined"] = PS["Foreign.NullOrUndefined"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.NullOrUndefined"] = $PS["Foreign.NullOrUndefined"] || {};
  var exports = $PS["Foreign.NullOrUndefined"];
  var $foreign = $PS["Foreign.NullOrUndefined"];
  exports["undefined"] = $foreign["undefined"];
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Types.TokenUnit"] = $PS["Network.Ethereum.Web3.Types.TokenUnit"] || {};
  var exports = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];                
  var Value = function (x) {
      return x;
  };   
  var TokenUnitSpec = function (divider) {
      this.divider = divider;
  };
  var TokenUnit = function (fromMinorUnit, toMinorUnit) {
      this.fromMinorUnit = fromMinorUnit;
      this.toMinorUnit = toMinorUnit;
  };
  var unitSpecNoPay = new TokenUnitSpec(Data_Function["const"](Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber)));
  var unValue = function (v) {
      return v;
  };
  var unitTokenUnitSpec = function (dictTokenUnitSpec) {
      return new TokenUnit(Value, unValue);
  };
  var toMinorUnit = function (dict) {
      return dict.toMinorUnit;
  };
  var fromMinorUnit = function (dict) {
      return dict.fromMinorUnit;
  };                                                        
  var encodeValue = new Foreign_Generic_Class.Encode(function (v) {
      return Foreign_Generic_Class.encode(Network_Ethereum_Core_BigNumber.encodeBigNumber)(v);
  });                                                               
  var createDivider = function (denomination) {
      return function (v) {
          var unsafeConvert = function (a) {
              return Data_Maybe.fromJust()(Network_Ethereum_Core_BigNumber.parseBigNumber(Data_Int.decimal)(a));
          };
          return unsafeConvert("1" + Data_String_Common.joinWith("")(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(denomination)("0")));
      };
  };
  var unitSpecMinorUnit = new TokenUnitSpec(createDivider(0));  
  var convert = function (dictTokenUnit) {
      return function (dictTokenUnit1) {
          var $28 = fromMinorUnit(dictTokenUnit1);
          var $29 = toMinorUnit(dictTokenUnit);
          return function ($30) {
              return $28($29($30));
          };
      };
  };
  exports["toMinorUnit"] = toMinorUnit;
  exports["convert"] = convert;
  exports["encodeValue"] = encodeValue;
  exports["unitTokenUnitSpec"] = unitTokenUnitSpec;
  exports["unitSpecNoPay"] = unitSpecNoPay;
  exports["unitSpecMinorUnit"] = unitSpecMinorUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Types.Types"] = $PS["Network.Ethereum.Web3.Types.Types"] || {};
  var exports = $PS["Network.Ethereum.Web3.Types.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Error_Util = $PS["Control.Error.Util"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic = $PS["Foreign.Generic"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_NullOrUndefined = $PS["Foreign.NullOrUndefined"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Types_TokenUnit = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var TransactionOptions = function (x) {
      return x;
  };
  var Rpc = (function () {
      function Rpc(value0) {
          this.value0 = value0;
      };
      Rpc.create = function (value0) {
          return new Rpc(value0);
      };
      return Rpc;
  })();
  var RemoteError = (function () {
      function RemoteError(value0) {
          this.value0 = value0;
      };
      RemoteError.create = function (value0) {
          return new RemoteError(value0);
      };
      return RemoteError;
  })();
  var ParserError = (function () {
      function ParserError(value0) {
          this.value0 = value0;
      };
      ParserError.create = function (value0) {
          return new ParserError(value0);
      };
      return ParserError;
  })();
  var NullError = (function () {
      function NullError() {

      };
      NullError.value = new NullError();
      return NullError;
  })();
  var Response = function (x) {
      return x;
  };   
  var NullStorageError = (function () {
      function NullStorageError(value0) {
          this.value0 = value0;
      };
      NullStorageError.create = function (value0) {
          return new NullStorageError(value0);
      };
      return NullStorageError;
  })();
  var BlockNumber = function (x) {
      return x;
  };
  var Latest = (function () {
      function Latest() {

      };
      Latest.value = new Latest();
      return Latest;
  })();
  var BN = (function () {
      function BN(value0) {
          this.value0 = value0;
      };
      BN.create = function (value0) {
          return new BN(value0);
      };
      return BN;
  })();                                                                        
  var monadThrowWeb3 = Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff);
  var monadEffectWeb3 = Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
  var throwWeb3 = (function () {
      var $295 = Effect_Class.liftEffect(monadEffectWeb3);
      return function ($296) {
          return $295(Effect_Exception.throwException($296));
      };
  })(); 
  var monadAskWeb3 = Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff);
  var monadAffWeb3 = Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff);
  var mkRequest = function (name) {
      return function (reqId) {
          return function (ps) {
              return {
                  jsonrpc: "2.0",
                  id: reqId,
                  method: name,
                  params: ps
              };
          };
      };
  };
  var genericWeb3Error = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Rpc) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof RemoteError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof ParserError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof NullError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types (line 635, column 1 - line 635, column 56): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Rpc(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new RemoteError(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ParserError(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return NullError.value;
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types (line 635, column 1 - line 635, column 56): " + [ x.constructor.name ]);
  });   
  var genericRpcError = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showRpcError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRpcError)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt))))(new Data_Symbol.IsSymbol(function () {
      return "RpcError";
  }))));
  var showWeb3Error = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericWeb3Error)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(showRpcError))(new Data_Symbol.IsSymbol(function () {
      return "Rpc";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "RemoteError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "ParserError";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "NullError";
  })))))));
  var genericCallError = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new NullStorageError(x);
  });
  var showCallError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericCallError)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "_data";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "signature";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Network_Ethereum_Core_HexString.showHexString))))(new Data_Symbol.IsSymbol(function () {
      return "NullStorageError";
  }))));                                                                                   
  var functorWeb3 = Control_Monad_Reader_Trans.functorReaderT(Effect_Aff.functorAff);
  var encodeTransactionOptions = new Foreign_Generic_Class.Encode(function (v) {
      var encodeMaybe = function (dictEncode) {
          return Data_Maybe.maybe(Foreign_NullOrUndefined["undefined"])(Foreign_Generic_Class.encode(dictEncode));
      };
      return Foreign_Generic_Class.encode(Foreign_Generic_Class.objectEncode(Foreign_Generic_Class.foreignEncode))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("from")(encodeMaybe(Network_Ethereum_Core_Signatures.encodeAddress)(v.from)), Data_Tuple.Tuple.create("to")(encodeMaybe(Network_Ethereum_Core_Signatures.encodeAddress)(v.to)), Data_Tuple.Tuple.create("value")(encodeMaybe(Network_Ethereum_Web3_Types_TokenUnit.encodeValue)(v.value)), Data_Tuple.Tuple.create("gas")(encodeMaybe(Network_Ethereum_Core_BigNumber.encodeBigNumber)(v.gas)), Data_Tuple.Tuple.create("gasPrice")(encodeMaybe(Network_Ethereum_Core_BigNumber.encodeBigNumber)(v.gasPrice)), Data_Tuple.Tuple.create("data")(encodeMaybe(Network_Ethereum_Core_HexString.encodeHexString)(v.data)), Data_Tuple.Tuple.create("nonce")(encodeMaybe(Network_Ethereum_Core_BigNumber.encodeBigNumber)(v.nonce)) ]));
  });
  var encodeRpcError = new Foreign_Generic_Class.Encode(function (x) {
      return Foreign_Generic.genericEncode(genericRpcError)(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
          return "RpcError";
      }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
          return "message";
      }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode))))))({
          sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
          unwrapSingleConstructors: true,
          unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
          fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
      })(x);
  });
  var encodeBlockNumber = Network_Ethereum_Core_BigNumber.encodeBigNumber;
  var encodeChainCursor = new Foreign_Generic_Class.Encode(function (cm) {
      if (cm instanceof Latest) {
          return Foreign_Generic_Class.encode(Foreign_Generic_Class.stringEncode)("latest");
      };
      if (cm instanceof BN) {
          return Foreign_Generic_Class.encode(encodeBlockNumber)(cm.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types (line 128, column 15 - line 130, column 21): " + [ cm.constructor.name ]);
  });
  var defaultTransactionOptions = {
      from: Data_Maybe.Nothing.value,
      to: Data_Maybe.Nothing.value,
      value: Data_Maybe.Nothing.value,
      gas: Data_Maybe.Nothing.value,
      gasPrice: Data_Maybe.Nothing.value,
      data: Data_Maybe.Nothing.value,
      nonce: Data_Maybe.Nothing.value
  };  
  var decodeRpcError = new Foreign_Generic_Class.Decode(function (x) {
      return Foreign_Generic.genericDecode(genericRpcError)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
          return "RpcError";
      }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
          return "message";
      }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))({
          sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
          unwrapSingleConstructors: true,
          unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
          fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
      })(x);
  });
  var decodeWeb3Error = new Foreign_Generic_Class.Decode(function (x) {
      var nullParser = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("result")(x))(function (res) {
          var $252 = Foreign.isNull(res);
          if ($252) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(NullError.value);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readString(res))(function (r) {
              return Foreign.fail(new Foreign.TypeMismatch("NullError", r));
          });
      });
      return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Rpc.create)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("error")(x))(Foreign_Generic_Class.decode(decodeRpcError))))(nullParser);
  });
  var runWeb3 = function (p) {
      return function (v) {
          var parseMsg = function (msg) {
              return Control_Error_Util.hush(Control_Monad_Except.runExcept(Foreign_Generic.genericDecodeJSON(genericWeb3Error)(Foreign_Generic_Class.genericDecodeSum(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "Rpc";
              }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsOther(decodeRpcError)))(Foreign_Generic_Class.genericCountArgsArgument))(Foreign_Generic_Class.genericDecodeSum(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "RemoteError";
              }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode)))(Foreign_Generic_Class.genericCountArgsArgument))(Foreign_Generic_Class.genericDecodeSum(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "ParserError";
              }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode)))(Foreign_Generic_Class.genericCountArgsArgument))(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NullError";
              }))(Foreign_Generic_Class.genericDecodeArgsNoArguments)(Foreign_Generic_Class.genericCountArgsNoArguments)))))(Foreign_Generic_Class.defaultOptions)(msg)));
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Control_Monad_Reader_Trans.runReaderT(v)(p)))(function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(v1.value0))((function () {
                      var $299 = Control_Applicative.pure(Effect_Aff.applicativeAff);
                      return function ($300) {
                          return $299(Data_Either.Left.create($300));
                      };
                  })())(parseMsg(Effect_Exception.message(v1.value0)));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(v1.value0));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Types.Types (line 391, column 61 - line 393, column 28): " + [ v1.constructor.name ]);
          });
      };
  };
  var decodeResponse$prime = function (dictDecode) {
      return new Foreign_Generic_Class.Decode(function (a) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Response)(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Left.create)(Foreign_Generic_Class.decode(decodeWeb3Error)(a)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Right.create)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("result")(a))(Foreign_Generic_Class.decode(dictDecode)))));
      });
  };
  var decodeJsonBlockNumber = new Data_Argonaut_Decode_Class.DecodeJson((function () {
      var $303 = Data_Functor.map(Data_Either.functorEither)(BlockNumber);
      var $304 = Data_Argonaut_Decode_Class.decodeJson(Network_Ethereum_Core_BigNumber.decodeJsonBigNumber);
      return function ($305) {
          return $303($304($305));
      };
  })());
  var bindWeb3 = Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff);
  var applicativeWeb3 = Control_Monad_Reader_Trans.applicativeReaderT(Effect_Aff.applicativeAff);
  var _value = function (dictTokenUnit) {
      return function (dictStrong) {
          return Data_Lens_Lens.lens(function (v) {
              return v.value;
          })(function (v) {
              return function (val) {
                  return TransactionOptions({
                      from: v.from,
                      to: v.to,
                      value: Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Web3_Types_TokenUnit.convert(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecMinorUnit))(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecMinorUnit)))(val),
                      gas: v.gas,
                      gasPrice: v.gasPrice,
                      data: v.data,
                      nonce: v.nonce
                  });
              };
          })(dictStrong);
      };
  };
  var _to = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.to;
      })(function (v) {
          return function (addr) {
              return TransactionOptions({
                  from: v.from,
                  to: addr,
                  value: v.value,
                  gas: v.gas,
                  gasPrice: v.gasPrice,
                  data: v.data,
                  nonce: v.nonce
              });
          };
      })(dictStrong);
  };
  var _nonce = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.nonce;
      })(function (v) {
          return function (n) {
              return TransactionOptions({
                  from: v.from,
                  to: v.to,
                  value: v.value,
                  gas: v.gas,
                  gasPrice: v.gasPrice,
                  data: v.data,
                  nonce: n
              });
          };
      })(dictStrong);
  };
  var _gasPrice = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.gasPrice;
      })(function (v) {
          return function (gp) {
              return TransactionOptions({
                  from: v.from,
                  to: v.to,
                  value: v.value,
                  gas: v.gas,
                  gasPrice: gp,
                  data: v.data,
                  nonce: v.nonce
              });
          };
      })(dictStrong);
  };
  var _gas = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.gas;
      })(function (v) {
          return function (g) {
              return TransactionOptions({
                  from: v.from,
                  to: v.to,
                  value: v.value,
                  gas: g,
                  gasPrice: v.gasPrice,
                  data: v.data,
                  nonce: v.nonce
              });
          };
      })(dictStrong);
  };
  var _from = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.from;
      })(function (v) {
          return function (addr) {
              return TransactionOptions({
                  from: addr,
                  to: v.to,
                  value: v.value,
                  gas: v.gas,
                  gasPrice: v.gasPrice,
                  data: v.data,
                  nonce: v.nonce
              });
          };
      })(dictStrong);
  };
  var _data = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.data;
      })(function (v) {
          return function (dat) {
              return TransactionOptions({
                  from: v.from,
                  to: v.to,
                  value: v.value,
                  gas: v.gas,
                  gasPrice: v.gasPrice,
                  data: dat,
                  nonce: v.nonce
              });
          };
      })(dictStrong);
  };
  exports["Latest"] = Latest;
  exports["defaultTransactionOptions"] = defaultTransactionOptions;
  exports["_from"] = _from;
  exports["_to"] = _to;
  exports["_data"] = _data;
  exports["_value"] = _value;
  exports["_gas"] = _gas;
  exports["_gasPrice"] = _gasPrice;
  exports["_nonce"] = _nonce;
  exports["runWeb3"] = runWeb3;
  exports["throwWeb3"] = throwWeb3;
  exports["mkRequest"] = mkRequest;
  exports["RemoteError"] = RemoteError;
  exports["ParserError"] = ParserError;
  exports["NullError"] = NullError;
  exports["NullStorageError"] = NullStorageError;
  exports["decodeJsonBlockNumber"] = decodeJsonBlockNumber;
  exports["encodeChainCursor"] = encodeChainCursor;
  exports["encodeTransactionOptions"] = encodeTransactionOptions;
  exports["functorWeb3"] = functorWeb3;
  exports["applicativeWeb3"] = applicativeWeb3;
  exports["bindWeb3"] = bindWeb3;
  exports["monadEffectWeb3"] = monadEffectWeb3;
  exports["monadAffWeb3"] = monadAffWeb3;
  exports["monadThrowWeb3"] = monadThrowWeb3;
  exports["monadAskWeb3"] = monadAskWeb3;
  exports["decodeResponse'"] = decodeResponse$prime;
  exports["showCallError"] = showCallError;
  exports["encodeRpcError"] = encodeRpcError;
  exports["genericWeb3Error"] = genericWeb3Error;
  exports["showWeb3Error"] = showWeb3Error;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Types.Artifact"] = $PS["Chanterelle.Internal.Types.Artifact"] || {};
  var exports = $PS["Chanterelle.Internal.Types.Artifact"];
  var Chanterelle_Internal_Types_Bytecode = $PS["Chanterelle.Internal.Types.Bytecode"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];                
  var Undeployed = (function () {
      function Undeployed(value0) {
          this.value0 = value0;
      };
      Undeployed.create = function (value0) {
          return new Undeployed(value0);
      };
      return Undeployed;
  })();
  var Deployed = (function () {
      function Deployed(value0) {
          this.value0 = value0;
      };
      Deployed.create = function (value0) {
          return new Deployed(value0);
      };
      return Deployed;
  })();
  var decodeJsonNetworkInfo = new Data_Argonaut_Decode_Class.DecodeJson(function (j) {
      return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Deployed.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Network_Ethereum_Core_Signatures.decodeJsonAddress)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Network_Ethereum_Core_HexString.decodeJsonHexString)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Network_Ethereum_Web3_Types_Types.decodeJsonBlockNumber)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Network_Ethereum_Core_HexString.decodeJsonHexString)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
          return "transactionHash";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "deployedBytecode";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "bytecode";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "blockNumber";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "blockHash";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "address";
      }))()())())(j)))(Data_Functor.map(Data_Either.functorEither)(Undeployed.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
          return "deployedBytecode";
      }))()())(new Data_Symbol.IsSymbol(function () {
          return "bytecode";
      }))()())())(j)));
  });        
  var decodeJsonArtifact = Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Chanterelle_Internal_Types_Bytecode.decodeJsonBytecode)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "deployedBytecode";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "bytecode";
  }))()())())(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonNumber)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeForeignObject(decodeJsonNetworkInfo))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "networks";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "lastModified";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "abi";
  }))()())();
  var _networks = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.networks, function (networks$prime) {
              return {
                  abi: v.abi,
                  code: v.code,
                  lastModified: v.lastModified,
                  networks: networks$prime
              };
          });
      })(dictStrong);
  };
  var _network = function (nid) {
      return function (dictStrong) {
          var $133 = _networks(dictStrong);
          var $134 = Data_Lens_At.at(Data_Lens_At.atForeignObject)(Data_Show.show(Data_Show.showInt)(nid))(dictStrong);
          return function ($135) {
              return $133($134($135));
          };
      };
  }; 
  var _address = Data_Lens_Getter.to(function (v) {
      return v.address;
  });
  var _Deployed = Data_Lens_Getter.to(function (v) {
      if (v instanceof Undeployed) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Deployed) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Chanterelle.Internal.Types.Artifact (line 109, column 3 - line 111, column 25): " + [ v.constructor.name ]);
  });
  exports["_network"] = _network;
  exports["_Deployed"] = _Deployed;
  exports["_address"] = _address;
  exports["decodeJsonArtifact"] = decodeJsonArtifact;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Utils.Error"] = $PS["Chanterelle.Internal.Utils.Error"] || {};
  var exports = $PS["Chanterelle.Internal.Utils.Error"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var except$prime = function (dictMonadThrow) {
      return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadThrow))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0()));
  };
  var withExceptM$prime = function (dictMonadThrow) {
      return function (f) {
          return function (m) {
              return Control_Bind.bind((dictMonadThrow.Monad0()).Bind1())(Data_Functor.map((((dictMonadThrow.Monad0()).Bind1()).Apply0()).Functor0())(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f))(m))(except$prime(dictMonadThrow));
          };
      };
  };
  var withExceptT$prime = function (dictMonadThrow) {
      return function (e) {
          return function (m) {
              return Control_Bind.bind((dictMonadThrow.Monad0()).Bind1())(Control_Monad_Except_Trans.runExceptT(Control_Monad_Except_Trans.withExceptT((((dictMonadThrow.Monad0()).Bind1()).Apply0()).Functor0())(e)(m)))(except$prime(dictMonadThrow));
          };
      };
  };
  var catchingAff = function (dictMonadAff) {
      return function (dictMonadThrow) {
          var $21 = withExceptM$prime(dictMonadThrow)(Data_Show.show(Effect_Exception.showError));
          var $22 = Effect_Aff_Class.liftAff(dictMonadAff);
          var $23 = Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
          return function ($24) {
              return $21($22($23($24)));
          };
      };
  };
  exports["catchingAff"] = catchingAff;
  exports["except'"] = except$prime;
  exports["withExceptT'"] = withExceptT$prime;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                          
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  exports["readTextFile"] = readTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Utils.FS"] = $PS["Chanterelle.Internal.Utils.FS"] || {};
  var exports = $PS["Chanterelle.Internal.Utils.FS"];
  var Chanterelle_Internal_Utils_Error = $PS["Chanterelle.Internal.Utils.Error"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var readTextFile = function (dictMonadAff) {
      return function (dictMonadThrow) {
          return function (filename) {
              return Chanterelle_Internal_Utils_Error.catchingAff(dictMonadAff)(dictMonadThrow)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(filename));
          };
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Utils.Json"] = $PS["Chanterelle.Internal.Utils.Json"] || {};
  var exports = $PS["Chanterelle.Internal.Utils.Json"];
  var Chanterelle_Internal_Utils_Error = $PS["Chanterelle.Internal.Utils.Error"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];                                                            
  var parseDecodeM = function (dictDecodeJson) {
      return function (dictMonad) {
          return function (dictMonadThrow) {
              var $8 = Chanterelle_Internal_Utils_Error["except'"](dictMonadThrow);
              var $9 = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
                  var $11 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.printJsonDecodeError);
                  var $12 = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson);
                  return function ($13) {
                      return $11($12($13));
                  };
              })())(Data_Argonaut_Parser.jsonParser);
              return function ($10) {
                  return $8($9($10));
              };
          };
      };
  };
  exports["parseDecodeM"] = parseDecodeM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Artifact"] = $PS["Chanterelle.Internal.Artifact"] || {};
  var exports = $PS["Chanterelle.Internal.Artifact"];
  var Chanterelle_Internal_Types_Artifact = $PS["Chanterelle.Internal.Types.Artifact"];
  var Chanterelle_Internal_Utils_FS = $PS["Chanterelle.Internal.Utils.FS"];
  var Chanterelle_Internal_Utils_Json = $PS["Chanterelle.Internal.Utils.Json"];
  var Control_Bind = $PS["Control.Bind"];
  var readArtifact = function (dictMonadAff) {
      return function (dictMonadThrow) {
          return function (filepath) {
              return Control_Bind.bindFlipped(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Chanterelle_Internal_Utils_Json.parseDecodeM(Chanterelle_Internal_Types_Artifact.decodeJsonArtifact)((dictMonadAff.MonadEffect0()).Monad0())(dictMonadThrow))(Chanterelle_Internal_Utils_FS.readTextFile(dictMonadAff)(dictMonadThrow)(filepath));
          };
      };
  };
  exports["readArtifact"] = readArtifact;
})(PS);
(function(exports) {
  var theGlobalLevel = null;

  exports.getLogLevelWithDefault = function (defaultLogLevel) {
      return function () {
          if (theGlobalLevel == null) {
              return defaultLogLevel;
          } else {
            return theGlobalLevel;
          };
      };
  };

  exports.setLogLevel = function (newValue) {
      return function() {
          theGlobalLevel = newValue;
      };
  };
})(PS["Chanterelle.Internal.Logging"] = PS["Chanterelle.Internal.Logging"] || {});
(function(exports) {
  "use strict";

  exports.now = function () {
      return new Date();
  };

  exports.toISOString = function (time) {
      return time.toISOString();
  };
})(PS["Chanterelle.Internal.Utils.Time"] = PS["Chanterelle.Internal.Utils.Time"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Utils.Time"] = $PS["Chanterelle.Internal.Utils.Time"] || {};
  var exports = $PS["Chanterelle.Internal.Utils.Time"];
  var $foreign = $PS["Chanterelle.Internal.Utils.Time"];
  exports["now"] = $foreign.now;
  exports["toISOString"] = $foreign.toISOString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Logger"] = $PS["Control.Logger"] || {};
  var exports = $PS["Control.Logger"];             
  var Logger = function (x) {
      return x;
  };
  var log = function (v) {
      return v;
  };
  exports["Logger"] = Logger;
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Chanterelle.Internal.Logging"] = $PS["Chanterelle.Internal.Logging"] || {};
  var exports = $PS["Chanterelle.Internal.Logging"];
  var $foreign = $PS["Chanterelle.Internal.Logging"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Chanterelle_Internal_Utils_Time = $PS["Chanterelle.Internal.Utils.Time"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Logger = $PS["Control.Logger"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];                                                    
  var Debug = (function () {
      function Debug() {

      };
      Debug.value = new Debug();
      return Debug;
  })();
  var Info = (function () {
      function Info() {

      };
      Info.value = new Info();
      return Info;
  })();
  var Warn = (function () {
      function Warn() {

      };
      Warn.value = new Warn();
      return Warn;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var Loggable = function (logify) {
      this.logify = logify;
  };
  var showLogLevel = new Data_Show.Show(function (v) {
      if (v instanceof Debug) {
          return "DEBUG";
      };
      if (v instanceof Info) {
          return "INFO";
      };
      if (v instanceof Warn) {
          return "WARN";
      };
      if (v instanceof $$Error) {
          return "ERROR";
      };
      throw new Error("Failed pattern match at Chanterelle.Internal.Logging (line 42, column 1 - line 46, column 25): " + [ v.constructor.name ]);
  });
  var logify = function (dict) {
      return dict.logify;
  };
  var loggableString = new Loggable(Control_Category.identity(Control_Category.categoryFn));
  var fancyColorLogger = function (dictMonadEffect) {
      return function (dictLoggable) {
          var logLevelColor = function (v) {
              if (v instanceof Debug) {
                  return Ansi_Codes.White.value;
              };
              if (v instanceof Info) {
                  return Ansi_Codes.Green.value;
              };
              if (v instanceof Warn) {
                  return Ansi_Codes.Yellow.value;
              };
              if (v instanceof $$Error) {
                  return Ansi_Codes.Red.value;
              };
              throw new Error("Failed pattern match at Chanterelle.Internal.Logging (line 78, column 21 - line 82, column 19): " + [ v.constructor.name ]);
          };
          var colorize = function (level) {
              return Ansi_Output.withGraphics(Ansi_Output.foreground(logLevelColor(level)));
          };
          return Control_Logger.Logger(function (v) {
              return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
                  var iso = Data_Functor.map(Effect.functorEffect)(Chanterelle_Internal_Utils_Time.toISOString)(Chanterelle_Internal_Utils_Time.now)();
                  return Effect_Console.log(colorize(v.level)(iso + (" [" + (Data_Show.show(showLogLevel)(v.level) + ("] " + logify(dictLoggable)(v.msg))))))();
              });
          });
      };
  };
  var eqLogLevel = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Debug && y instanceof Debug) {
              return true;
          };
          if (x instanceof Info && y instanceof Info) {
              return true;
          };
          if (x instanceof Warn && y instanceof Warn) {
              return true;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return true;
          };
          return false;
      };
  });
  var ordLogLevel = new Data_Ord.Ord(function () {
      return eqLogLevel;
  }, (function () {
      var levelOrder = function (level) {
          if (level instanceof Debug) {
              return 1;
          };
          if (level instanceof Info) {
              return 2;
          };
          if (level instanceof Warn) {
              return 3;
          };
          if (level instanceof $$Error) {
              return 4;
          };
          throw new Error("Failed pattern match at Chanterelle.Internal.Logging (line 36, column 26 - line 40, column 19): " + [ level.constructor.name ]);
      };
      return Data_Ord.comparing(Data_Ord.ordInt)(levelOrder);
  })());
  var log = function (dictMonadEffect) {
      return function (level) {
          return function (msg) {
              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)($foreign.getLogLevelWithDefault(Info.value)))(function (currentLevel) {
                  return Control_Applicative.when((dictMonadEffect.Monad0()).Applicative0())(Data_Ord.greaterThanOrEq(ordLogLevel)(level)(currentLevel))(Control_Logger.log(fancyColorLogger(dictMonadEffect)(loggableString))({
                      level: level,
                      msg: msg
                  }));
              });
          };
      };
  };
  exports["Debug"] = Debug;
  exports["Info"] = Info;
  exports["Warn"] = Warn;
  exports["Error"] = $$Error;
  exports["log"] = log;
  exports["setLogLevel"] = $foreign.setLogLevel;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor.Tagged"] = $PS["Data.Functor.Tagged"] || {};
  var exports = $PS["Data.Functor.Tagged"];
  var untagged = function (v) {
      return v;
  };                                                        
  var tagged = function (a) {
      return a;
  };
  exports["tagged"] = tagged;
  exports["untagged"] = untagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var setJust = function (p) {
      var $24 = set(p);
      return function ($25) {
          return $24(Data_Maybe.Just.create($25));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
  exports["setJust"] = setJust;
})(PS);
(function(exports) {
  "use strict";


  exports._sendAsync = function (provider) {
      return function (request) {
          return function(onError, onSuccess) {
              provider.sendAsync(request, function(err, succ) {
                  if (err) {
                      onError(err);
                  } else {
                      onSuccess(succ);
                  }
              });
              return function (cancelError, onCancelerError, onCancelerSuccess) {
                  onCancelerSuccess();
              };
          };
      };
  };
})(PS["Network.Ethereum.Web3.JsonRPC"] = PS["Network.Ethereum.Web3.JsonRPC"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.JsonRPC"] = $PS["Network.Ethereum.Web3.JsonRPC"] || {};
  var exports = $PS["Network.Ethereum.Web3.JsonRPC"];
  var $foreign = $PS["Network.Ethereum.Web3.JsonRPC"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic = $PS["Foreign.Generic"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];                
  var Remote = function (remote_) {
      this.remote_ = remote_;
  };
  var remote_ = function (dict) {
      return dict.remote_;
  };
  var remoteInductive = function (dictEncode) {
      return function (dictRemote) {
          return new Remote(function (f) {
              return function (x) {
                  return remote_(dictRemote)(function (p) {
                      return function (args) {
                          return f(p)(Data_Array.cons(Foreign_Generic_Class.encode(dictEncode)(x))(args));
                      };
                  });
              };
          });
      };
  };
  var remoteBase = function (dictDecode) {
      return new Remote(function (f) {
          var asError = function (e) {
              return Effect_Exception.error(Foreign_Generic.genericEncodeJSON(Network_Ethereum_Web3_Types_Types.genericWeb3Error)(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "Rpc";
              }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(Network_Ethereum_Web3_Types_Types.encodeRpcError))))(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "RemoteError";
              }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode))))(Foreign_Generic_Class.genericEncodeSum(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "ParserError";
              }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode))))(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NullError";
              }))(Foreign_Generic_Class.genericEncodeArgsNoArguments)))))(Foreign_Generic_Class.defaultOptions)(e));
          };
          return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Control_Monad_Reader_Class.ask(Network_Ethereum_Web3_Types_Types.monadAskWeb3))(function (p) {
              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Effect_Aff_Class.liftAff(Network_Ethereum_Web3_Types_Types.monadAffWeb3)(Effect_Aff.attempt(f(p)(Data_Monoid.mempty(Data_Monoid.monoidArray)))))(function (res$prime) {
                  if (res$prime instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(Network_Ethereum_Web3_Types_Types.RemoteError.create(Data_Show.show(Effect_Exception.showError)(res$prime.value0))));
                  };
                  if (res$prime instanceof Data_Either.Right) {
                      var v = Control_Monad_Except.runExcept(Foreign_Generic_Class.decode(Network_Ethereum_Web3_Types_Types["decodeResponse'"](dictDecode))(res$prime.value0));
                      if (v instanceof Data_Either.Left) {
                          return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(Network_Ethereum_Web3_Types_Types.ParserError.create(Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v.value0))));
                      };
                      if (v instanceof Data_Either.Right) {
                          if (v.value0 instanceof Data_Either.Left) {
                              return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(asError(v.value0.value0));
                          };
                          if (v.value0 instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(v.value0.value0);
                          };
                          throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC (line 37, column 31 - line 39, column 28): " + [ v.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC (line 34, column 20 - line 39, column 28): " + [ v.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Network.Ethereum.Web3.JsonRPC (line 32, column 5 - line 39, column 28): " + [ res$prime.constructor.name ]);
              });
          });
      });
  };
  var remote = function (dictRemote) {
      return function (n) {
          return remote_(dictRemote)(function (provider) {
              return function (ps) {
                  return Effect_Aff_Compat.fromEffectFnAff($foreign["_sendAsync"](provider)(Network_Ethereum_Web3_Types_Types.mkRequest(n)(1)(ps)));
              };
          });
      };
  };
  exports["remote"] = remote;
  exports["remoteBase"] = remoteBase;
  exports["remoteInductive"] = remoteInductive;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Api"] = $PS["Network.Ethereum.Web3.Api"] || {};
  var exports = $PS["Network.Ethereum.Web3.Api"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_JsonRPC = $PS["Network.Ethereum.Web3.JsonRPC"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var net_version = Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteBase(Foreign_Generic_Class.stringDecode))("net_version");
  var eth_sendTransaction = function (opts) {
      return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeTransactionOptions)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_HexString.decodeHexString)))("eth_sendTransaction")(opts);
  };
  var eth_sendRawTransaction = function (rawTx) {
      return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Core_HexString.encodeHexString)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_HexString.decodeHexString)))("eth_sendRawTransaction")(rawTx);
  };
  var eth_getTransactionCount = function (addr) {
      return function (cm) {
          return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Core_Signatures.encodeAddress)(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeChainCursor)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_BigNumber.decodeBigNumber))))("eth_getTransactionCount")(addr)(cm);
      };
  };
  var eth_getAccounts = Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteBase(Foreign_Generic_Class.arrayDecode(Network_Ethereum_Core_Signatures.decodeAddress)))("eth_accounts");
  var eth_gasPrice = Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_BigNumber.decodeBigNumber))("eth_gasPrice");
  var eth_estimateGas = function (txOpts) {
      return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeTransactionOptions)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_BigNumber.decodeBigNumber)))("eth_estimateGas")(txOpts);
  };                                                                                                                                                                
  var eth_call = function (opts) {
      return function (cm) {
          return Network_Ethereum_Web3_JsonRPC.remote(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeTransactionOptions)(Network_Ethereum_Web3_JsonRPC.remoteInductive(Network_Ethereum_Web3_Types_Types.encodeChainCursor)(Network_Ethereum_Web3_JsonRPC.remoteBase(Network_Ethereum_Core_HexString.decodeHexString))))("eth_call")(opts)(cm);
      };
  };
  exports["net_version"] = net_version;
  exports["eth_gasPrice"] = eth_gasPrice;
  exports["eth_getTransactionCount"] = eth_getTransactionCount;
  exports["eth_sendRawTransaction"] = eth_sendRawTransaction;
  exports["eth_estimateGas"] = eth_estimateGas;
  exports["eth_call"] = eth_call;
  exports["eth_sendTransaction"] = eth_sendTransaction;
  exports["eth_getAccounts"] = eth_getAccounts;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.Size"] = $PS["Network.Ethereum.Web3.Solidity.Size"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Data_Int = $PS["Data.Int"];                
  var DProxy = (function () {
      function DProxy() {

      };
      DProxy.value = new DProxy();
      return DProxy;
  })();
  var DLProxy = (function () {
      function DLProxy() {

      };
      DLProxy.value = new DLProxy();
      return DLProxy;
  })();
  var KnownSize = function (sizeVal) {
      this.sizeVal = sizeVal;
  };
  var KnownDigit = function (digitVal) {
      this.digitVal = digitVal;
  };
  var IntSize = function (KnownSize0) {
      this.KnownSize0 = KnownSize0;
  };           
  var DigitCount = function (digitCount) {
      this.digitCount = digitCount;
  };
  var sizeVal = function (dict) {
      return dict.sizeVal;
  }; 
  var sizeN8 = new KnownDigit(function (v) {
      return 8;
  });
  var sizeN6 = new KnownDigit(function (v) {
      return 6;
  });
  var sizeN5 = new KnownDigit(function (v) {
      return 5;
  });
  var sizeN3 = new KnownDigit(function (v) {
      return 3;
  });
  var sizeN2 = new KnownDigit(function (v) {
      return 2;
  });
  var sizeD1 = new KnownDigit(function (v) {
      return 1;
  });
  var digitVal = function (dict) {
      return dict.digitVal;
  };
  var knownSizeBase = function (dictKnownDigit) {
      return new KnownSize(function (p) {
          return digitVal(dictKnownDigit)(DProxy.value);
      });
  }; 
  var digitCount = function (dict) {
      return dict.digitCount;
  };
  var knownSizeLoop = function (dictDigitCount) {
      return function (dictKnownSize) {
          return function (dictKnownDigit) {
              return new KnownSize(function (v) {
                  var currentPow = digitCount(dictDigitCount)(DLProxy.value);
                  var head = Data_Int.pow(10)(currentPow) * digitVal(dictKnownDigit)(DProxy.value) | 0;
                  return head + sizeVal(dictKnownSize)(DLProxy.value) | 0;
              });
          };
      };
  };
  var countLoop = function (dictDigitCount) {
      return new DigitCount(function (v) {
          return digitCount(dictDigitCount)(DLProxy.value) + 1 | 0;
      });
  };
  var countBase = new DigitCount(function (v) {
      return 1;
  });
  var intSize256 = new IntSize(function () {
      return knownSizeLoop(countLoop(countBase))(knownSizeLoop(countBase)(knownSizeBase(sizeN6))(sizeN5))(sizeN2);
  });
  var intSize32 = new IntSize(function () {
      return knownSizeLoop(countBase)(knownSizeBase(sizeN2))(sizeN3);
  });
  exports["sizeVal"] = sizeVal;
  exports["DLProxy"] = DLProxy;
  exports["countBase"] = countBase;
  exports["countLoop"] = countLoop;
  exports["sizeD1"] = sizeD1;
  exports["sizeN2"] = sizeN2;
  exports["sizeN3"] = sizeN3;
  exports["sizeN5"] = sizeN5;
  exports["sizeN6"] = sizeN6;
  exports["sizeN8"] = sizeN8;
  exports["knownSizeBase"] = knownSizeBase;
  exports["knownSizeLoop"] = knownSizeLoop;
  exports["intSize32"] = intSize32;
  exports["intSize256"] = intSize256;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.UInt"] = $PS["Network.Ethereum.Web3.Solidity.UInt"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];                
  var UIntN = function (x) {
      return x;
  };
  var unUIntN = function (dictKnownSize) {
      return function (v) {
          return v;
      };
  };
  var uIntNFromBigNumber = function (dictKnownSize) {
      return function (v) {
          return function (a) {
              if (Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(a)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  var maxVal = Data_Ring.sub(Network_Ethereum_Core_BigNumber.ringBigNumber)(Network_Ethereum_Core_BigNumber.pow(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(2))(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value)))(Data_Semiring.one(Network_Ethereum_Core_BigNumber.semiringBigNumber));
                  var $7 = Data_Ord.greaterThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(a)(maxVal);
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(UIntN(a));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.UInt (line 34, column 1 - line 34, column 90): " + [ v.constructor.name, a.constructor.name ]);
          };
      };
  };
  var showUIntN = Network_Ethereum_Core_BigNumber.showBigNumber;
  exports["unUIntN"] = unUIntN;
  exports["uIntNFromBigNumber"] = uIntNFromBigNumber;
  exports["showUIntN"] = showUIntN;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"] = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Tagged = $PS["Data.Functor.Tagged"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_UInt = $PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var ABIEncode = function (toDataBuilder) {
      this.toDataBuilder = toDataBuilder;
  };
  var ABIDecode = function (fromDataParser) {
      this.fromDataParser = fromDataParser;
  };
  var uInt256HexBuilder = function (x) {
      var v = Network_Ethereum_Core_HexString.toSignedHexString(x);
      return Network_Ethereum_Core_HexString.padLeft(v.value1);
  };
  var toDataBuilder = function (dict) {
      return dict.toDataBuilder;
  };
  var take = function (dictMonad) {
      return function (n) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))((function () {
              var $27 = Data_Maybe.fromJust();
              return function ($28) {
                  return $27(Network_Ethereum_Core_HexString.mkHexString(Data_String_CodeUnits.fromCharArray($28)));
              };
          })())(Data_Unfoldable.replicateA(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(n)(Text_Parsing_Parser_String.anyChar(Network_Ethereum_Core_HexString.stringLikeHexString)(dictMonad)));
      };
  };
  var uInt256HexParser = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toBigNumber)(take(dictMonad)(64));
  };
  var int256HexParser = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toBigNumberFromSignedHexString)(take(dictMonad)(64));
  };
  var int256HexBuilder = function ($copy_x) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(x) {
          var $25 = Data_Ord.lessThan(Network_Ethereum_Core_BigNumber.ordBigNumber)(x)(Data_Semiring.zero(Network_Ethereum_Core_BigNumber.semiringBigNumber));
          if ($25) {
              $copy_x = Network_Ethereum_Core_BigNumber.toTwosComplement(x);
              return;
          };
          $tco_done = true;
          return Network_Ethereum_Core_HexString.padLeftSigned(Network_Ethereum_Core_HexString.toSignedHexString(x));
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_x);
      };
      return $tco_result;
  };
  var fromDataParser = function (dict) {
      return dict.fromDataParser;
  };
  var bytesBuilder = (function () {
      var $29 = Data_Maybe.fromJust();
      var $30 = Data_Function.flip(Data_ByteString.toString)(Node_Encoding.Hex.value);
      return function ($31) {
          return Network_Ethereum_Core_HexString.padRight($29(Network_Ethereum_Core_HexString.mkHexString($30($31))));
      };
  })();
  var abiEncodeUint = function (dictIntSize) {
      return new ABIEncode(function (a) {
          return uInt256HexBuilder(Network_Ethereum_Web3_Solidity_UInt.unUIntN(dictIntSize.KnownSize0())(a));
      });
  };
  var abiEncodeTagged = function (dictABIEncode) {
      return new ABIEncode((function () {
          var $32 = toDataBuilder(dictABIEncode);
          return function ($33) {
              return $32(Data_Functor_Tagged.untagged($33));
          };
      })());
  };
  var abiEncodeInt = new ABIEncode((function () {
      var $34 = Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"]);
      return function ($35) {
          return int256HexBuilder($34($35));
      };
  })());
  var abiEncodeBytesD = new ABIEncode(function (bytes) {
      return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(uInt256HexBuilder(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(Data_ByteString.length(bytes))))(bytesBuilder(bytes));
  });                                                    
  var abiEncodeAddress = new ABIEncode(function (addr) {
      return Network_Ethereum_Core_HexString.padLeft(Network_Ethereum_Core_Signatures.unAddress(addr));
  });
  var abiDecodeUint = function (dictIntSize) {
      return new ABIDecode((function () {
          var msg = function (n) {
              var size = Network_Ethereum_Web3_Solidity_Size.sizeVal(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value);
              return "Couldn't parse as uint" + (Data_Show.show(Data_Show.showInt)(size) + (" : " + Data_Show.show(Network_Ethereum_Core_BigNumber.showBigNumber)(n)));
          };
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(uInt256HexParser(Data_Identity.monadIdentity))(function (a) {
              return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(msg(a)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value)(a));
          });
      })());
  };
  var abiDecodeAlgebra = new ABIDecode(int256HexParser(Data_Identity.monadIdentity));
  exports["fromDataParser"] = fromDataParser;
  exports["toDataBuilder"] = toDataBuilder;
  exports["take"] = take;
  exports["abiDecodeAlgebra"] = abiDecodeAlgebra;
  exports["abiEncodeInt"] = abiEncodeInt;
  exports["abiEncodeAddress"] = abiEncodeAddress;
  exports["abiEncodeBytesD"] = abiEncodeBytesD;
  exports["abiEncodeUint"] = abiEncodeUint;
  exports["abiDecodeUint"] = abiDecodeUint;
  exports["abiEncodeTagged"] = abiEncodeTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.EncodingType"] = $PS["Network.Ethereum.Web3.Solidity.EncodingType"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Data_Function = $PS["Data.Function"];
  var Data_Show = $PS["Data.Show"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var EncodingType = function (isDynamic, typeName) {
      this.isDynamic = isDynamic;
      this.typeName = typeName;
  };
  var typeName = function (dict) {
      return dict.typeName;
  };
  var isDynamic = function (dict) {
      return dict.isDynamic;
  };
  var encodingTypeUIntN = function (dictIntSize) {
      return new EncodingType(Data_Function["const"](false), Data_Function["const"]("uint" + Data_Show.show(Data_Show.showInt)(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictIntSize.KnownSize0())(Network_Ethereum_Web3_Solidity_Size.DLProxy.value))));
  };
  var encodingTypeTagged = function (dictEncodingType) {
      return new EncodingType(function (v) {
          return isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value);
      }, function (v) {
          return typeName(dictEncodingType)(Type_Proxy["Proxy"].value);
      });
  };                                                                                                   
  var encodingTypeBytesD = new EncodingType(Data_Function["const"](true), Data_Function["const"]("bytes[]"));
  var encodingTypeAddress = new EncodingType(Data_Function["const"](false), Data_Function["const"]("address"));
  exports["isDynamic"] = isDynamic;
  exports["encodingTypeUIntN"] = encodingTypeUIntN;
  exports["encodingTypeAddress"] = encodingTypeAddress;
  exports["encodingTypeBytesD"] = encodingTypeBytesD;
  exports["encodingTypeTagged"] = encodingTypeTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var lookAhead = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
              });
          })));
      };
  };
  exports["lookAhead"] = lookAhead;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.Generic"] = $PS["Network.Ethereum.Web3.Solidity.Generic"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Tagged = $PS["Data.Functor.Tagged"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = $PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Record = $PS["Record"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var EncodedValue = (function () {
      function EncodedValue(value0) {
          this.value0 = value0;
      };
      EncodedValue.create = function (value0) {
          return new EncodedValue(value0);
      };
      return EncodedValue;
  })();
  var RecordFieldsIso = function (fromRecordFields, toRecordFields) {
      this.fromRecordFields = fromRecordFields;
      this.toRecordFields = toRecordFields;
  };
  var GenericABIEncode = function (genericToDataBuilder) {
      this.genericToDataBuilder = genericToDataBuilder;
  };
  var GenericABIDecode = function (genericFromDataParser) {
      this.genericFromDataParser = genericFromDataParser;
  };
  var ABIData = function (_serialize) {
      this["_serialize"] = _serialize;
  };
  var toRecordFields = function (dict) {
      return dict.toRecordFields;
  }; 
  var isoRecordBase = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return new RecordFieldsIso(function (v) {
                  return function (r) {
                      return Data_Functor_Tagged.tagged(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r));
                  };
              }, function (v) {
                  return function (v1) {
                      return Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(Data_Functor_Tagged.untagged(v1))({});
                  };
              });
          };
      };
  };
  var genericToDataBuilder = function (dict) {
      return dict.genericToDataBuilder;
  };
  var genericFromDataParser = function (dict) {
      return dict.genericFromDataParser;
  };
  var genericABIEncode = function (dictGeneric) {
      return function (dictGenericABIEncode) {
          var $113 = genericToDataBuilder(dictGenericABIEncode);
          var $114 = Data_Generic_Rep.from(dictGeneric);
          return function ($115) {
              return $113($114($115));
          };
      };
  };
  var genericABIDecode = function (dictGeneric) {
      return function (dictGenericABIDecode) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.to(dictGeneric))(genericFromDataParser(dictGenericABIDecode));
      };
  };
  var genericFromData = function (dictGeneric) {
      return function (dictGenericABIDecode) {
          return Data_Function.flip(Text_Parsing_Parser.runParser)(genericABIDecode(dictGeneric)(dictGenericABIDecode));
      };
  };
  var fromRecordFields = function (dict) {
      return dict.fromRecordFields;
  };
  var genericFromRecordFields = function (dictRecordFieldsIso) {
      return function (dictGeneric) {
          return function (r) {
              return Data_Generic_Rep.to(dictGeneric)(Data_Generic_Rep.Constructor(fromRecordFields(dictRecordFieldsIso)(Type_Data_RowList.RLProxy.value)(r)));
          };
      };
  };
  var isoRecordInductive = function (dictRecordFieldsIso) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (dictIsSymbol) {
                  return function (dictListToRow) {
                      return new RecordFieldsIso(function (v) {
                          return function (r) {
                              var before = Record["delete"](dictIsSymbol)()()(Data_Symbol.SProxy.value)(r);
                              var rest = fromRecordFields(dictRecordFieldsIso)(Type_Data_RowList.RLProxy.value)(before);
                              var a = Data_Functor_Tagged.tagged(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r));
                              return new Data_Generic_Rep.Product(a, rest);
                          };
                      }, function (v) {
                          return function (v1) {
                              var rest = toRecordFields(dictRecordFieldsIso)(Type_Data_RowList.RLProxy.value)(v1.value1);
                              return Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(Data_Functor_Tagged.untagged(v1.value0))(rest);
                          };
                      });
                  };
              };
          };
      };
  };
  var eqEncodedValue = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.order === v1.value0.order;
      };
  });
  var ordEncodedValue = new Data_Ord.Ord(function () {
      return eqEncodedValue;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.value0.order)(v1.value0.order);
      };
  });
  var dParser = function (dictABIDecode) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Network_Ethereum_Core_BigNumber.unsafeToInt)(Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeAlgebra)))(function (dataOffset) {
          return Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(Data_Identity.monadIdentity)))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Network_Ethereum_Web3_Solidity_AbiEncoding.take(Data_Identity.monadIdentity)((dataOffset * 2 | 0) - (v.value1.column - 1 | 0) | 0))(function () {
                  return Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(dictABIDecode);
              });
          }));
      });
  };
  var factorParser = function (dictABIDecode) {
      return function (dictEncodingType) {
          if (!Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value)) {
              return Network_Ethereum_Web3_Solidity_AbiEncoding.fromDataParser(dictABIDecode);
          };
          if (Data_Boolean.otherwise) {
              return dParser(dictABIDecode);
          };
          throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 171, column 1 - line 171, column 79): " + [  ]);
      };
  };
  var combineEncodedValues = function (encodings) {
      var headsOffset = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return acc + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Network_Ethereum_Core_HexString.hexLength(v.value0.encoding))(2) | 0;
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return acc + 32 | 0;
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 88, column 51 - line 90, column 51): " + [ v.value0.offset.constructor.name ]);
          };
      })(0)(encodings);
      var adjust = function (n) {
          return Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return new EncodedValue({
                  order: v.value0.order,
                  offset: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Semiring.add(Data_Semiring.semiringInt)(n))(v.value0.offset),
                  encoding: v.value0.encoding
              });
          });
      };
      var addTailOffsets = function ($copy_init) {
          return function ($copy_acc) {
              return function ($copy_es) {
                  var $tco_var_init = $copy_init;
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(init, acc, es) {
                      var v = Data_Array.uncons(es);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Array.reverse(acc);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          if (v.value0.head.value0.offset instanceof Data_Maybe.Nothing) {
                              $tco_var_init = init;
                              $tco_var_acc = Data_Array.cons(v.value0.head)(acc);
                              $copy_es = v.value0.tail;
                              return;
                          };
                          if (v.value0.head.value0.offset instanceof Data_Maybe.Just) {
                              $tco_var_init = init;
                              $tco_var_acc = Data_Array.cons(v.value0.head)(acc);
                              $copy_es = adjust(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Network_Ethereum_Core_HexString.hexLength(v.value0.head.value0.encoding))(2))(v.value0.tail);
                              return;
                          };
                          throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 84, column 12 - line 86, column 98): " + [ v.value0.head.value0.offset.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 80, column 34 - line 86, column 98): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_init, $tco_var_acc, $copy_es);
                  };
                  return $tco_result;
              };
          };
      };
      var sortedEs = adjust(headsOffset)(Data_Array.sort(ordEncodedValue)(encodings));
      var encodings$prime = addTailOffsets(headsOffset)([  ])(sortedEs);
      var tails = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return acc;
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(v.value0.encoding);
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 71, column 50 - line 73, column 54): " + [ v.value0.offset.constructor.name ]);
          };
      })(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq))(encodings$prime);
      var heads = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              if (v.value0.offset instanceof Data_Maybe.Nothing) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(v.value0.encoding);
              };
              if (v.value0.offset instanceof Data_Maybe.Just) {
                  return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(acc)(Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeInt)(v.value0.offset.value0));
              };
              throw new Error("Failed pattern match at Network.Ethereum.Web3.Solidity.Generic (line 67, column 50 - line 69, column 59): " + [ v.value0.offset.constructor.name ]);
          };
      })(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq))(encodings$prime);
      return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(heads)(tails);
  };                                                                                                                                                                              
  var baseAbiDecode = function (dictEncodingType) {
      return function (dictABIDecode) {
          return new GenericABIDecode(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Argument)(factorParser(dictABIDecode)(dictEncodingType)));
      };
  };
  var abiDecodeConstructor = function (dictGenericABIDecode) {
      return new GenericABIDecode(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(genericFromDataParser(dictGenericABIDecode)));
  }; 
  var abiDataBase = function (dictEncodingType) {
      return function (dictABIEncode) {
          return new ABIData(function (encoded) {
              return function (v) {
                  var staticEncoding = new EncodedValue({
                      encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v),
                      offset: Data_Maybe.Nothing.value,
                      order: 1 + Data_Array.length(encoded) | 0
                  });
                  var dynEncoding = new EncodedValue({
                      encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v),
                      offset: new Data_Maybe.Just(0),
                      order: 1 + Data_Array.length(encoded) | 0
                  });
                  var $106 = Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value);
                  if ($106) {
                      return Data_Array.cons(dynEncoding)(encoded);
                  };
                  return Data_Array.cons(staticEncoding)(encoded);
              };
          });
      };
  };
  var _serialize = function (dict) {
      return dict["_serialize"];
  };
  var abiDataInductive = function (dictEncodingType) {
      return function (dictABIEncode) {
          return function (dictABIData) {
              return new ABIData(function (encoded) {
                  return function (v) {
                      var staticEncoding = new EncodedValue({
                          encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v.value0),
                          offset: Data_Maybe.Nothing.value,
                          order: 1 + Data_Array.length(encoded) | 0
                      });
                      var dynEncoding = new EncodedValue({
                          encoding: Network_Ethereum_Web3_Solidity_AbiEncoding.toDataBuilder(dictABIEncode)(v.value0),
                          offset: new Data_Maybe.Just(0),
                          order: 1 + Data_Array.length(encoded) | 0
                      });
                      var $109 = Network_Ethereum_Web3_Solidity_EncodingType.isDynamic(dictEncodingType)(Type_Proxy["Proxy"].value);
                      if ($109) {
                          return _serialize(dictABIData)(Data_Array.cons(dynEncoding)(encoded))(v.value1);
                      };
                      return _serialize(dictABIData)(Data_Array.cons(staticEncoding)(encoded))(v.value1);
                  };
              });
          };
      };
  };
  var abiEncodeConstructor = function (dictABIData) {
      return new GenericABIEncode(function (v) {
          return combineEncodedValues(_serialize(dictABIData)([  ])(v));
      });
  };
  exports["genericABIEncode"] = genericABIEncode;
  exports["genericFromData"] = genericFromData;
  exports["genericFromRecordFields"] = genericFromRecordFields;
  exports["abiDataBase"] = abiDataBase;
  exports["abiDataInductive"] = abiDataInductive;
  exports["abiEncodeConstructor"] = abiEncodeConstructor;
  exports["baseAbiDecode"] = baseAbiDecode;
  exports["abiDecodeConstructor"] = abiDecodeConstructor;
  exports["isoRecordBase"] = isoRecordBase;
  exports["isoRecordInductive"] = isoRecordInductive;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Contract"] = $PS["Network.Ethereum.Web3.Contract"] || {};
  var exports = $PS["Network.Ethereum.Web3.Contract"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Tagged = $PS["Data.Functor.Tagged"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = $PS["Network.Ethereum.Core.Keccak256"];
  var Network_Ethereum_Web3_Api = $PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Solidity_Generic = $PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Types_TokenUnit = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var TxMethod = function (sendTx) {
      this.sendTx = sendTx;
  };
  var CallMethod = function (call) {
      this.call = call;
  };
  var sendTx = function (dict) {
      return dict.sendTx;
  };
  var mkDataField = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictRecordFieldsIso) {
              return function (dictGenericABIEncode) {
                  return function (v) {
                      return function (r) {
                          var sig = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var sel = Network_Ethereum_Core_Keccak256.toSelector(sig);
                          var args = Network_Ethereum_Web3_Solidity_Generic.genericFromRecordFields(dictRecordFieldsIso)(dictGeneric)(r);
                          return Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(args));
                      };
                  };
              };
          };
      };
  };
  var call = function (dict) {
      return dict.call;
  };
  var _sendTransaction = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictGenericABIEncode) {
              return function (dictTokenUnit) {
                  return function (txOptions) {
                      return function (dat) {
                          var txdata = function (d) {
                              return Data_Lens_Setter.over(Network_Ethereum_Web3_Types_Types["_value"](dictTokenUnit)(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Web3_Types_TokenUnit.convert(dictTokenUnit)(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecMinorUnit))))(Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types["_data"](Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(d))(txOptions));
                          };
                          var sel = Network_Ethereum_Core_Keccak256.toSelector(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value));
                          return Network_Ethereum_Web3_Api.eth_sendTransaction(txdata(Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(Data_Functor_Tagged.untagged(dat)))));
                      };
                  };
              };
          };
      };
  };
  var txmethodAbiEncode = function (dictGeneric) {
      return function (dictGenericABIEncode) {
          return new TxMethod(function (dictTokenUnit) {
              return function (dictIsSymbol) {
                  return _sendTransaction(dictIsSymbol)(dictGeneric)(dictGenericABIEncode)(dictTokenUnit);
              };
          });
      };
  };
  var _call = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictGenericABIEncode) {
              return function (dictGeneric1) {
                  return function (dictGenericABIDecode) {
                      return function (txOptions) {
                          return function (cursor) {
                              return function (dat) {
                                  var txdata = function (d) {
                                      return Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types["_data"](Data_Profunctor_Strong.strongFn))(new Data_Maybe.Just(d))(txOptions);
                                  };
                                  var sig = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                  var sel = Network_Ethereum_Core_Keccak256.toSelector(sig);
                                  var fullData = Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(Data_Functor_Tagged.untagged(dat)));
                                  return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Network_Ethereum_Web3_Api.eth_call(txdata(Data_Semigroup.append(Network_Ethereum_Core_HexString.semigpStringEq)(sel)(Network_Ethereum_Web3_Solidity_Generic.genericABIEncode(dictGeneric)(dictGenericABIEncode)(Data_Functor_Tagged.untagged(dat)))))(cursor))(function (res) {
                                      var v = Network_Ethereum_Web3_Solidity_Generic.genericFromData(dictGeneric1)(dictGenericABIDecode)(res);
                                      if (v instanceof Data_Either.Left) {
                                          var $37 = Data_Eq.eq(Network_Ethereum_Core_HexString.hexStringEq)(res)(Data_Monoid.mempty(Network_Ethereum_Core_HexString.monoidStringEq));
                                          if ($37) {
                                              return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(Data_Either.Left.create(new Network_Ethereum_Web3_Types_Types.NullStorageError({
                                                  signature: sig,
                                                  "_data": fullData
                                              })));
                                          };
                                          return Network_Ethereum_Web3_Types_Types.throwWeb3(Effect_Exception.error(Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0)));
                                      };
                                      if (v instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(new Data_Either.Right(v.value0));
                                      };
                                      throw new Error("Failed pattern match at Network.Ethereum.Web3.Contract (line 123, column 5 - line 130, column 32): " + [ v.constructor.name ]);
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var callmethodAbiEncode = function (dictGeneric) {
      return function (dictGenericABIEncode) {
          return function (dictGeneric1) {
              return function (dictGenericABIDecode) {
                  return new CallMethod(function (dictIsSymbol) {
                      return _call(dictIsSymbol)(dictGeneric)(dictGenericABIEncode)(dictGeneric1)(dictGenericABIDecode);
                  });
              };
          };
      };
  };
  exports["call"] = call;
  exports["sendTx"] = sendTx;
  exports["mkDataField"] = mkDataField;
  exports["txmethodAbiEncode"] = txmethodAbiEncode;
  exports["callmethodAbiEncode"] = callmethodAbiEncode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Contract.Internal"] = $PS["Network.Ethereum.Web3.Contract.Internal"] || {};
  var exports = $PS["Network.Ethereum.Web3.Contract.Internal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor_Tagged = $PS["Data.Functor.Tagged"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record = $PS["Record"];                
  var UncurryFields = function (uncurryFields) {
      this.uncurryFields = uncurryFields;
  };
  var uncurryFieldsEmpty = new UncurryFields(function (v) {
      return Control_Category.identity(Control_Category.categoryFn);
  });
  var uncurryFields = function (dict) {
      return dict.uncurryFields;
  };
  var uncurryFieldsInductive = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (dictUncurryFields) {
                  return new UncurryFields(function (r) {
                      return function (f) {
                          var before = Record["delete"](dictIsSymbol)()()(Data_Symbol.SProxy.value)(r);
                          var arg = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r);
                          var partiallyApplied = f(Data_Functor_Tagged.tagged(arg));
                          return uncurryFields(dictUncurryFields)(before)(partiallyApplied);
                      };
                  });
              };
          };
      };
  };
  exports["uncurryFields"] = uncurryFields;
  exports["uncurryFieldsEmpty"] = uncurryFieldsEmpty;
  exports["uncurryFieldsInductive"] = uncurryFieldsInductive;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.Tuple"] = $PS["Network.Ethereum.Web3.Solidity.Tuple"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Tuple5 = (function () {
      function Tuple5(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Tuple5.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Tuple5(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Tuple5;
  })();
  var Tuple4 = (function () {
      function Tuple4(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Tuple4.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Tuple4(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Tuple4;
  })();
  var unTuple1 = function (v) {
      return v;
  };
  var genericTuple5 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, x.value4))));
  }, function (x) {
      return new Tuple5(x.value0, x.value1.value0, x.value1.value1.value0, x.value1.value1.value1.value0, x.value1.value1.value1.value1);
  });
  var genericTuple4 = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, x.value3)));
  }, function (x) {
      return new Tuple4(x.value0, x.value1.value0, x.value1.value1.value0, x.value1.value1.value1);
  });
  var genericTuple1 = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  exports["unTuple1"] = unTuple1;
  exports["Tuple4"] = Tuple4;
  exports["Tuple5"] = Tuple5;
  exports["genericTuple1"] = genericTuple1;
  exports["genericTuple4"] = genericTuple4;
  exports["genericTuple5"] = genericTuple5;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Contracts.RelayableNFT"] = $PS["Contracts.RelayableNFT"] || {};
  var exports = $PS["Contracts.RelayableNFT"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Tagged = $PS["Data.Functor.Tagged"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Network_Ethereum_Web3_Contract = $PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Contract_Internal = $PS["Network.Ethereum.Web3.Contract.Internal"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = $PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Generic = $PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = $PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Types_TokenUnit = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var transferRelayed = function (x0) {
      return function (r) {
          var transferRelayed$prime = function (y0) {
              return function (y1) {
                  return function (y2) {
                      return function (y3) {
                          return function (y4) {
                              return function (y5) {
                                  return Network_Ethereum_Web3_Contract.sendTx(Network_Ethereum_Web3_Contract.txmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple5)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress)))))))))(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay))(new Data_Symbol.IsSymbol(function () {
                                      return "transferRelayed(bytes,uint32,uint256,uint256,address)";
                                  }))(y0)(Data_Functor_Tagged.tagged(new Network_Ethereum_Web3_Solidity_Tuple.Tuple5(y1, y2, y3, y4, y5)));
                              };
                          };
                      };
                  };
              };
          };
          return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "signature";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "nonce";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "feeAmount";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "tokenID";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "destination";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))))))(r)(transferRelayed$prime(x0));
      };
  };
  var mintRelayed = function (x0) {
      return function (r) {
          var mintRelayed$prime = function (y0) {
              return function (y1) {
                  return function (y2) {
                      return function (y3) {
                          return function (y4) {
                              return Network_Ethereum_Web3_Contract.sendTx(Network_Ethereum_Web3_Contract.txmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple4)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))))))))(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay))(new Data_Symbol.IsSymbol(function () {
                                  return "mintRelayed(bytes,uint32,uint256,bytes)";
                              }))(y0)(Data_Functor_Tagged.tagged(new Network_Ethereum_Web3_Solidity_Tuple.Tuple4(y1, y2, y3, y4)));
                          };
                      };
                  };
              };
          };
          return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "signature";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "nonce";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "feeAmount";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
              return "tokenData";
          }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty)))))(r)(mintRelayed$prime(x0));
      };
  }; 
  var getCurrentRelayNonce = function (x0) {
      return function (cm) {
          return function (r) {
              var getCurrentRelayNonce$prime = function (y0) {
                  return function (cm$prime) {
                      return function (y2) {
                          return Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)(Data_Functor.map(Data_Either.functorEither)(Network_Ethereum_Web3_Solidity_Tuple.unTuple1))(Network_Ethereum_Web3_Contract.call(Network_Ethereum_Web3_Contract.callmethodAbiEncode(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress))))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple1)(Network_Ethereum_Web3_Solidity_Generic.abiDecodeConstructor(Network_Ethereum_Web3_Solidity_Generic.baseAbiDecode(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiDecodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))))(new Data_Symbol.IsSymbol(function () {
                              return "getCurrentRelayNonce(address)";
                          }))(y0)(cm$prime)(Data_Functor_Tagged.tagged(y2)));
                      };
                  };
              };
              return Network_Ethereum_Web3_Contract_Internal.uncurryFields(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsInductive(new Data_Symbol.IsSymbol(function () {
                  return "addr";
              }))()()(Network_Ethereum_Web3_Contract_Internal.uncurryFieldsEmpty))(r)(getCurrentRelayNonce$prime(x0)(cm));
          };
      };
  };
  exports["getCurrentRelayNonce"] = getCurrentRelayNonce;
  exports["mintRelayed"] = mintRelayed;
  exports["transferRelayed"] = transferRelayed;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EitherR"] = $PS["Data.EitherR"] || {};
  var exports = $PS["Data.EitherR"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var runEitherR = function (v) {
      return v;
  };
  var monadEitherR = new Control_Monad.Monad(function () {
      return applicativeEitherR;
  }, function () {
      return bindEitherR;
  });
  var functorEitherR = new Data_Functor.Functor(Control_Monad.liftM1(monadEitherR));
  var bindEitherR = new Control_Bind.Bind(function () {
      return applyEitherR;
  }, function (v) {
      return function (f) {
          if (v instanceof Data_Either.Left) {
              return f(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Data.EitherR (line 83, column 5 - line 85, column 35): " + [ v.constructor.name ]);
      };
  });
  var applyEitherR = new Control_Apply.Apply(function () {
      return functorEitherR;
  }, Control_Monad.ap(monadEitherR));
  var applicativeEitherR = new Control_Applicative.Applicative(function () {
      return applyEitherR;
  }, function (e) {
      return new Data_Either.Left(e);
  });                                                
  var fmapL = function (f) {
      return function (e) {
          return runEitherR(Data_Functor.map(functorEitherR)(f)(e));
      };
  };
  exports["fmapL"] = fmapL;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Solidity.Sizes"] = $PS["Network.Ethereum.Web3.Solidity.Sizes"] || {};
  var exports = $PS["Network.Ethereum.Web3.Solidity.Sizes"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var s8 = Network_Ethereum_Web3_Solidity_Size.DLProxy.value; 
  var s256 = Network_Ethereum_Web3_Solidity_Size.DLProxy.value;
  exports["s8"] = s8;
  exports["s256"] = s256;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DApp.Relay.Types"] = $PS["DApp.Relay.Types"] || {};
  var exports = $PS["DApp.Relay.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Error_Util = $PS["Control.Error.Util"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_EitherR = $PS["Data.EitherR"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Sizes = $PS["Network.Ethereum.Web3.Solidity.Sizes"];
  var Network_Ethereum_Web3_Solidity_UInt = $PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Type_Quotient = $PS["Type.Quotient"];
  var DecodedMint = (function () {
      function DecodedMint(value0) {
          this.value0 = value0;
      };
      DecodedMint.create = function (value0) {
          return new DecodedMint(value0);
      };
      return DecodedMint;
  })();
  var DecodedTransfer = (function () {
      function DecodedTransfer(value0) {
          this.value0 = value0;
      };
      DecodedTransfer.create = function (value0) {
          return new DecodedTransfer(value0);
      };
      return DecodedTransfer;
  })();
  var DecodedBoth = (function () {
      function DecodedBoth(value0) {
          this.value0 = value0;
      };
      DecodedBoth.create = function (value0) {
          return new DecodedBoth(value0);
      };
      return DecodedBoth;
  })();
  var showSignedRelayedTransfer = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "destination";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "feeAmount";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "nonce";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "signature";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "tokenID";
      }))(Data_Show.showRecordFieldsNil)(Network_Ethereum_Web3_Solidity_UInt.showUIntN))(Network_Ethereum_Core_Signatures.showSignature))(Network_Ethereum_Web3_Solidity_UInt.showUIntN))(Network_Ethereum_Web3_Solidity_UInt.showUIntN))(Network_Ethereum_Core_Signatures.addressShow)))(v);
  });
  var showSignedRelayedMessage = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "feeAmount";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "nonce";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "signature";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "tokenData";
      }))(Data_Show.showRecordFieldsNil)(Data_ByteString.showByteString))(Network_Ethereum_Core_Signatures.showSignature))(Network_Ethereum_Web3_Solidity_UInt.showUIntN))(Network_Ethereum_Web3_Solidity_UInt.showUIntN)))(v);
  });
  var parseUIntNFromHex = function (dictMonad) {
      return function (dictKnownSize) {
          var numChars = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Network_Ethereum_Web3_Solidity_Size.sizeVal(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value))(4);
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))((function () {
              var $159 = Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(dictKnownSize)(Network_Ethereum_Web3_Solidity_Size.DLProxy.value);
              return function ($160) {
                  return $159(Network_Ethereum_Core_HexString.toBigNumber($160));
              };
          })())(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(numChars)))(function (maybeUInt) {
              return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("Couldn't fit BigNumber into desired uintN"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(maybeUInt);
          });
      };
  };
  var parseSignature = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(64))(function (r) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(64))(function (s) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toBigNumber)(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(2)))(function (v) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))({
                      r: r,
                      s: s,
                      v: Network_Ethereum_Core_BigNumber.unsafeToInt(v)
                  });
              });
          });
      });
  };
  var parseByteStringFromHex = function (dictMonad) {
      var numLengthHexChars = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Network_Ethereum_Web3_Solidity_Size.sizeVal(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(Network_Ethereum_Web3_Solidity_Sizes.s8))(4);
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))((function () {
          var $161 = Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(Network_Ethereum_Web3_Solidity_Sizes.s8);
          return function ($162) {
              return $161(Network_Ethereum_Core_HexString.toBigNumber($162));
          };
      })())(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(numLengthHexChars)))(function (maybeLen) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("Couldn't parse uint8 length"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(maybeLen))(function (len) {
              var numStringHexChars = Network_Ethereum_Core_BigNumber.unsafeToInt(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(len)) * 2 | 0;
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_HexString.toByteString)(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(numStringHexChars));
          });
      });
  };
  var parseSignedRelayedMessage = function (bs) {
      var v = Text_Parsing_Parser.runParserT(Data_Identity.monadIdentity)(Network_Ethereum_Core_HexString.fromByteString(bs))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseSignature(Data_Identity.monadIdentity))(function (signature) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseUIntNFromHex(Data_Identity.monadIdentity)(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(function (nonce) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseUIntNFromHex(Data_Identity.monadIdentity)(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeD1)))(function (feeAmount) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseByteStringFromHex(Data_Identity.monadIdentity))(function (tokenData) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Network_Ethereum_Core_HexString.stringLikeHexString)(Data_Identity.monadIdentity))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                              signature: signature,
                              nonce: nonce,
                              feeAmount: feeAmount,
                              tokenData: tokenData
                          });
                      });
                  });
              });
          });
      }));
      return Data_EitherR.fmapL(Data_Show.show(Text_Parsing_Parser.showParseError))(v);
  };
  var parseAddressHex = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Network_Ethereum_Core_Signatures.mkAddress)(Network_Ethereum_Web3_Solidity_AbiEncoding.take(dictMonad)(40)))(function (addr) {
          return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("Couldn't parse address from 20 bytes"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(addr);
      });
  };
  var parseSignedRelayedTransfer = function (bs) {
      var v = Text_Parsing_Parser.runParserT(Data_Identity.monadIdentity)(Network_Ethereum_Core_HexString.fromByteString(bs))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseSignature(Data_Identity.monadIdentity))(function (signature) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseUIntNFromHex(Data_Identity.monadIdentity)(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(function (nonce) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseUIntNFromHex(Data_Identity.monadIdentity)(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeD1)))(function (feeAmount) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseUIntNFromHex(Data_Identity.monadIdentity)(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3)))(function (tokenID) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAddressHex(Data_Identity.monadIdentity))(function (destination) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Network_Ethereum_Core_HexString.stringLikeHexString)(Data_Identity.monadIdentity))(function () {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                                  signature: signature,
                                  nonce: nonce,
                                  feeAmount: feeAmount,
                                  tokenID: tokenID,
                                  destination: destination
                              });
                          });
                      });
                  });
              });
          });
      }));
      return Data_EitherR.fmapL(Data_Show.show(Text_Parsing_Parser.showParseError))(v);
  };
  var packSignature = function (v) {
      var packV = Data_ByteString.singleton(Type_Quotient.mkQuotient(v.v));
      var packS = Network_Ethereum_Core_HexString.toByteString(v.s);
      var packR = Network_Ethereum_Core_HexString.toByteString(v.r);
      return Data_Semigroup.append(Data_ByteString.semigroupByteString)(packR)(Data_Semigroup.append(Data_ByteString.semigroupByteString)(packS)(packV));
  };
  var genericDecodedMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof DecodedMint) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof DecodedTransfer) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof DecodedBoth) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
      };
      throw new Error("Failed pattern match at DApp.Relay.Types (line 272, column 1 - line 272, column 66): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new DecodedMint(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new DecodedTransfer(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
          return new DecodedBoth(x.value0.value0);
      };
      throw new Error("Failed pattern match at DApp.Relay.Types (line 272, column 1 - line 272, column 66): " + [ x.constructor.name ]);
  });
  var showDecodedMessage = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericDecodedMessage)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(showSignedRelayedMessage))(new Data_Symbol.IsSymbol(function () {
      return "DecodedMint";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(showSignedRelayedTransfer))(new Data_Symbol.IsSymbol(function () {
      return "DecodedTransfer";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "mint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "transfer";
  }))(Data_Show.showRecordFieldsNil)(showSignedRelayedTransfer))(showSignedRelayedMessage))))(new Data_Symbol.IsSymbol(function () {
      return "DecodedBoth";
  }))))));
  var decodePackedMessage = function (msg) {
      var mkBoth = function (mint) {
          return function (transfer) {
              return new DecodedBoth({
                  mint: mint,
                  transfer: transfer
              });
          };
      };
      var asTransfer = Control_Error_Util.hush(parseSignedRelayedTransfer(msg));
      var asMint = Control_Error_Util.hush(parseSignedRelayedMessage(msg));
      var asBoth = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkBoth)(asMint))(asTransfer);
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(asBoth)(Data_Functor.map(Data_Maybe.functorMaybe)(DecodedMint.create)(asMint)))(Data_Functor.map(Data_Maybe.functorMaybe)(DecodedTransfer.create)(asTransfer));
  };
  exports["packSignature"] = packSignature;
  exports["DecodedMint"] = DecodedMint;
  exports["DecodedTransfer"] = DecodedTransfer;
  exports["decodePackedMessage"] = decodePackedMessage;
  exports["showDecodedMessage"] = showDecodedMessage;
})(PS);
(function(exports) {
  
  var rlp =require("rlp"); 

  exports._rlpEncode = rlp.encode;

  exports._rlpNull = null;
})(PS["Network.Ethereum.Core.RLP"] = PS["Network.Ethereum.Core.RLP"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Core.RLP"] = $PS["Network.Ethereum.Core.RLP"] || {};
  var exports = $PS["Network.Ethereum.Core.RLP"];
  var $foreign = $PS["Network.Ethereum.Core.RLP"];
  var Data_Functor = $PS["Data.Functor"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var RLPNull = (function () {
      function RLPNull() {

      };
      RLPNull.value = new RLPNull();
      return RLPNull;
  })();
  var RLPString = (function () {
      function RLPString(value0) {
          this.value0 = value0;
      };
      RLPString.create = function (value0) {
          return new RLPString(value0);
      };
      return RLPString;
  })();
  var RLPHexString = (function () {
      function RLPHexString(value0) {
          this.value0 = value0;
      };
      RLPHexString.create = function (value0) {
          return new RLPHexString(value0);
      };
      return RLPHexString;
  })();
  var RLPAddress = (function () {
      function RLPAddress(value0) {
          this.value0 = value0;
      };
      RLPAddress.create = function (value0) {
          return new RLPAddress(value0);
      };
      return RLPAddress;
  })();
  var RLPInt = (function () {
      function RLPInt(value0) {
          this.value0 = value0;
      };
      RLPInt.create = function (value0) {
          return new RLPInt(value0);
      };
      return RLPInt;
  })();
  var RLPBigNumber = (function () {
      function RLPBigNumber(value0) {
          this.value0 = value0;
      };
      RLPBigNumber.create = function (value0) {
          return new RLPBigNumber(value0);
      };
      return RLPBigNumber;
  })();
  var RLPByteString = (function () {
      function RLPByteString(value0) {
          this.value0 = value0;
      };
      RLPByteString.create = function (value0) {
          return new RLPByteString(value0);
      };
      return RLPByteString;
  })();
  var RLPArray = (function () {
      function RLPArray(value0) {
          this.value0 = value0;
      };
      RLPArray.create = function (value0) {
          return new RLPArray(value0);
      };
      return RLPArray;
  })();
  var RLPEncode = function (rlpEncode) {
      this.rlpEncode = rlpEncode;
  };
  var transRLP = function (obj) {
      if (obj instanceof RLPNull) {
          return $foreign["_rlpNull"];
      };
      if (obj instanceof RLPString) {
          return obj.value0;
      };
      if (obj instanceof RLPInt) {
          return obj.value0;
      };
      if (obj instanceof RLPHexString) {
          return "0x" + Network_Ethereum_Core_HexString.unHex(obj.value0);
      };
      if (obj instanceof RLPAddress) {
          return transRLP(RLPHexString.create(Network_Ethereum_Core_Signatures.unAddress(obj.value0)));
      };
      if (obj instanceof RLPBigNumber) {
          return obj.value0;
      };
      if (obj instanceof RLPByteString) {
          return obj.value0;
      };
      if (obj instanceof RLPArray) {
          return Data_Functor.map(Data_Functor.functorArray)(transRLP)(obj.value0);
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.RLP (line 34, column 16 - line 42, column 46): " + [ obj.constructor.name ]);
  };
  var rlpEncodeObject = new RLPEncode(function ($8) {
      return $foreign["_rlpEncode"](transRLP($8));
  });
  var rlpEncode = function (dict) {
      return dict.rlpEncode;
  };
  exports["RLPNull"] = RLPNull;
  exports["RLPHexString"] = RLPHexString;
  exports["RLPAddress"] = RLPAddress;
  exports["RLPInt"] = RLPInt;
  exports["RLPBigNumber"] = RLPBigNumber;
  exports["RLPByteString"] = RLPByteString;
  exports["RLPArray"] = RLPArray;
  exports["rlpEncode"] = rlpEncode;
  exports["rlpEncodeObject"] = rlpEncodeObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DApp.Util"] = $PS["DApp.Util"] || {};
  var exports = $PS["DApp.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = $PS["Network.Ethereum.Core.Keccak256"];
  var Network_Ethereum_Core_RLP = $PS["Network.Ethereum.Core.RLP"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Api = $PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Contract = $PS["Network.Ethereum.Web3.Contract"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Sizes = $PS["Network.Ethereum.Web3.Solidity.Sizes"];
  var Network_Ethereum_Web3_Solidity_UInt = $PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types_TokenUnit = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var widenUIntN32 = function (u32) {
      return Partial_Unsafe.unsafePartialBecause("we're expanding an uint32 -> uint256")(function (dictPartial) {
          return Data_Maybe.fromJust();
      })(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Sizes.s256)(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3))(u32)));
  };
  var widenUIntN128 = function (u128) {
      return Partial_Unsafe.unsafePartialBecause("we're expanding an uint128 -> uint256")(function (dictPartial) {
          return Data_Maybe.fromJust();
      })(Network_Ethereum_Web3_Solidity_UInt.uIntNFromBigNumber(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN6))(Network_Ethereum_Web3_Solidity_Size.sizeN5))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Sizes.s256)(Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countLoop(Network_Ethereum_Web3_Solidity_Size.countBase))(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN8))(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeD1))(u128)));
  };
  var makeUnsignedTransactionMessage = function (v) {
      return function (v1) {
          return Network_Ethereum_Core_RLP.rlpEncode(Network_Ethereum_Core_RLP.rlpEncodeObject)(new Network_Ethereum_Core_RLP.RLPArray([ (function () {
              var $40 = Data_Eq.eq(Network_Ethereum_Core_BigNumber.eqBigNumber)(v1.nonce)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0));
              if ($40) {
                  return Network_Ethereum_Core_RLP.RLPNull.value;
              };
              return new Network_Ethereum_Core_RLP.RLPBigNumber(v1.nonce);
          })(), new Network_Ethereum_Core_RLP.RLPBigNumber(v1.gasPrice), new Network_Ethereum_Core_RLP.RLPBigNumber(v1.gas), Data_Maybe.maybe(Network_Ethereum_Core_RLP.RLPNull.value)(Network_Ethereum_Core_RLP.RLPAddress.create)(v1.to), Data_Maybe.maybe(Network_Ethereum_Core_RLP.RLPNull.value)(Network_Ethereum_Core_RLP.RLPBigNumber.create)(v1.value), new Network_Ethereum_Core_RLP.RLPHexString(v1.data), new Network_Ethereum_Core_RLP.RLPInt(v), new Network_Ethereum_Core_RLP.RLPInt(0), new Network_Ethereum_Core_RLP.RLPInt(0) ]));
      };
  };
  var makeTxOpts = function (v) {
      return Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_to"](Data_Profunctor_Strong.strongFn))(v.to)(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_from"](Data_Profunctor_Strong.strongFn))(v.from)(Network_Ethereum_Web3_Types_Types.defaultTransactionOptions));
  };
  var makeSignedTransactionMessage = function (v) {
      return function (v1) {
          return Network_Ethereum_Core_RLP.rlpEncode(Network_Ethereum_Core_RLP.rlpEncodeObject)(new Network_Ethereum_Core_RLP.RLPArray([ (function () {
              var $46 = Data_Eq.eq(Network_Ethereum_Core_BigNumber.eqBigNumber)(v1.nonce)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(0));
              if ($46) {
                  return Network_Ethereum_Core_RLP.RLPNull.value;
              };
              return new Network_Ethereum_Core_RLP.RLPBigNumber(v1.nonce);
          })(), new Network_Ethereum_Core_RLP.RLPBigNumber(v1.gasPrice), new Network_Ethereum_Core_RLP.RLPBigNumber(v1.gas), Data_Maybe.maybe(Network_Ethereum_Core_RLP.RLPNull.value)(Network_Ethereum_Core_RLP.RLPAddress.create)(v1.to), Data_Maybe.maybe(Network_Ethereum_Core_RLP.RLPNull.value)(Network_Ethereum_Core_RLP.RLPBigNumber.create)(v1.value), new Network_Ethereum_Core_RLP.RLPHexString(v1.data), new Network_Ethereum_Core_RLP.RLPInt(v.v), new Network_Ethereum_Core_RLP.RLPByteString(Network_Ethereum_Core_HexString.toByteString(v.r)), new Network_Ethereum_Core_RLP.RLPByteString(Network_Ethereum_Core_HexString.toByteString(v.s)) ]));
      };
  };                                                                                     
  var signTransaction$prime = function (dictTokenUnitSpec) {
      return function (pk) {
          return function (v) {
              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Maybe.maybe(Network_Ethereum_Web3_Api.eth_gasPrice)(Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3))(v.gasPrice))(function (gasPriceToUse) {
                  return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Maybe.maybe(Network_Ethereum_Web3_Api.eth_getTransactionCount(Network_Ethereum_Core_Signatures.privateToAddress(pk))(Network_Ethereum_Web3_Types_Types.Latest.value))(Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3))(v.nonce))(function (nonceToUse) {
                      return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Control_Bind.bindFlipped(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(Effect_Exception.error("Couldn't parse the node's chain ID as an Int!")))(Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)))(Data_Functor.map(Network_Ethereum_Web3_Types_Types.functorWeb3)((function () {
                          var $62 = Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Core_Signatures.ChainId);
                          return function ($63) {
                              return $62(Data_Int.fromString($63));
                          };
                      })())(Network_Ethereum_Web3_Api.net_version)))(function (chainId) {
                          var getEstimatedGas = (function () {
                              var filledFromTxOpts = Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_nonce"](Data_Profunctor_Strong.strongFn))(nonceToUse)(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_gasPrice"](Data_Profunctor_Strong.strongFn))(gasPriceToUse)(Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types["_gas"](Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value)(Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types["_value"](Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec))(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Web3_Types_TokenUnit.convert(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec))(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecMinorUnit)))(v.value))(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_from"](Data_Profunctor_Strong.strongFn))(Network_Ethereum_Core_Signatures.privateToAddress(pk))(v)))));
                              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Network_Ethereum_Web3_Api.eth_estimateGas(filledFromTxOpts))(function (nodeEstimate) {
                                  return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(Data_EuclideanRing.div(Network_Ethereum_Core_BigNumber.euclidianRingBigNumber)(Data_Semiring.mul(Network_Ethereum_Core_BigNumber.semiringBigNumber)(nodeEstimate)(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(125)))(Network_Ethereum_Core_BigNumber.embed(Network_Ethereum_Core_BigNumber["embedInt'"])(100)));
                              });
                          })();
                          return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Maybe.maybe(getEstimatedGas)(Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3))(v.gas))(function (gasToUse) {
                              var rawTx = {
                                  to: v.to,
                                  value: Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Web3_Types_TokenUnit.toMinorUnit(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec)))(v.value),
                                  gas: gasToUse,
                                  gasPrice: gasPriceToUse,
                                  data: Data_Maybe.fromMaybe(Partial_Unsafe.unsafePartialBecause("we're making an empty HexString")(function (dictPartial) {
                                      return Data_Maybe.fromJust();
                                  })(Network_Ethereum_Core_HexString.mkHexString("")))(v.data),
                                  nonce: nonceToUse
                              };
                              var hashedRawTx = Network_Ethereum_Core_Keccak256.keccak256(Network_Ethereum_Core_Keccak256.keccak256ByteString)(makeUnsignedTransactionMessage(chainId)(rawTx));
                              var sig = Network_Ethereum_Core_Signatures.addChainIdOffset(chainId)(Network_Ethereum_Core_Signatures.signMessage(pk)(hashedRawTx));
                              return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)(Network_Ethereum_Core_HexString.fromByteString(makeSignedTransactionMessage(sig)(rawTx)));
                          });
                      });
                  });
              });
          };
      };
  };
  var signABIFn$prime = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictGenericABIEncode) {
              return function (dictRecordFieldsIso) {
                  return function (dictTokenUnitSpec) {
                      return function (proxy) {
                          return function (pk) {
                              return function (txo) {
                                  return function (args) {
                                      return signTransaction$prime(dictTokenUnitSpec)(pk)(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_data"](Data_Profunctor_Strong.strongFn))(Network_Ethereum_Web3_Contract.mkDataField(dictIsSymbol)(dictGeneric)(dictRecordFieldsIso)(dictGenericABIEncode)(proxy)(args))(txo));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  }; 
  var callABIFn$prime = function (dictIsSymbol) {
      return function (dictGeneric) {
          return function (dictGenericABIEncode) {
              return function (dictRecordFieldsIso) {
                  return function (dictTokenUnitSpec) {
                      return function (proxy) {
                          return function (addr) {
                              return function (txo) {
                                  return function (args) {
                                      var txo$prime = Data_Lens_Setter.set(Network_Ethereum_Web3_Types_Types["_value"](Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec))(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Maybe.functorMaybe)(Network_Ethereum_Web3_Types_TokenUnit.convert(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec))(Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(Network_Ethereum_Web3_Types_TokenUnit.unitSpecMinorUnit)))(Data_Lens_Getter.viewOn(txo)(Network_Ethereum_Web3_Types_Types["_value"](Network_Ethereum_Web3_Types_TokenUnit.unitTokenUnitSpec(dictTokenUnitSpec))(Data_Lens_Internal_Forget.strongForget))))(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_data"](Data_Profunctor_Strong.strongFn))(Network_Ethereum_Web3_Contract.mkDataField(dictIsSymbol)(dictGeneric)(dictRecordFieldsIso)(dictGenericABIEncode)(proxy)(args))(Data_Lens_Setter.setJust(Network_Ethereum_Web3_Types_Types["_from"](Data_Profunctor_Strong.strongFn))(addr)(txo)));
                                      return Network_Ethereum_Web3_Api.eth_call(txo$prime)(Network_Ethereum_Web3_Types_Types.Latest.value);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["makeTxOpts"] = makeTxOpts;
  exports["widenUIntN32"] = widenUIntN32;
  exports["widenUIntN128"] = widenUIntN128;
  exports["signABIFn'"] = signABIFn$prime;
  exports["callABIFn'"] = callABIFn$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DApp.Relay"] = $PS["DApp.Relay"] || {};
  var exports = $PS["DApp.Relay"];
  var Contracts_RelayableNFT = $PS["Contracts.RelayableNFT"];
  var DApp_Relay_Types = $PS["DApp.Relay.Types"];
  var DApp_Util = $PS["DApp.Util"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Network_Ethereum_Web3_Solidity_AbiEncoding = $PS["Network.Ethereum.Web3.Solidity.AbiEncoding"];
  var Network_Ethereum_Web3_Solidity_EncodingType = $PS["Network.Ethereum.Web3.Solidity.EncodingType"];
  var Network_Ethereum_Web3_Solidity_Generic = $PS["Network.Ethereum.Web3.Solidity.Generic"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_Tuple = $PS["Network.Ethereum.Web3.Solidity.Tuple"];
  var Network_Ethereum_Web3_Types_TokenUnit = $PS["Network.Ethereum.Web3.Types.TokenUnit"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var transferRelayed$prime = function (pk) {
      return function (v) {
          return function (txOpts) {
              return DApp_Util["signABIFn'"](new Data_Symbol.IsSymbol(function () {
                  return "transferRelayed(bytes,uint32,uint256,uint256,address)";
              }))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple5)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress))))))))(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordBase(new Data_Symbol.IsSymbol(function () {
                  return "destination";
              }))()())()()(new Data_Symbol.IsSymbol(function () {
                  return "tokenID";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "feeAmount";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "nonce";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "signature";
              }))())(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay)(Type_Proxy["Proxy"].value)(pk)(txOpts)({
                  signature: DApp_Relay_Types.packSignature(v.signature),
                  feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
                  nonce: v.nonce,
                  tokenID: DApp_Util.widenUIntN32(v.tokenID),
                  destination: v.destination
              });
          };
      };
  };
  var transferRelayed = function (v) {
      return function (txOpts) {
          return Contracts_RelayableNFT.transferRelayed(txOpts)({
              signature: DApp_Relay_Types.packSignature(v.signature),
              feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
              nonce: v.nonce,
              tokenID: DApp_Util.widenUIntN32(v.tokenID),
              destination: v.destination
          });
      };
  };
  var mintRelayed$prime = function (pk) {
      return function (v) {
          return function (txOpts) {
              return DApp_Util["signABIFn'"](new Data_Symbol.IsSymbol(function () {
                  return "mintRelayed(bytes,uint32,uint256,bytes)";
              }))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple4)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD)))))))(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordBase(new Data_Symbol.IsSymbol(function () {
                  return "tokenData";
              }))()())()()(new Data_Symbol.IsSymbol(function () {
                  return "feeAmount";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "nonce";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "signature";
              }))())(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay)(Type_Proxy["Proxy"].value)(pk)(txOpts)({
                  signature: DApp_Relay_Types.packSignature(v.signature),
                  feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
                  nonce: v.nonce,
                  tokenData: v.tokenData
              });
          };
      };
  };
  var mintRelayed = function (v) {
      return function (txOpts) {
          return Contracts_RelayableNFT.mintRelayed(txOpts)({
              signature: DApp_Relay_Types.packSignature(v.signature),
              feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
              nonce: v.nonce,
              tokenData: v.tokenData
          });
      };
  };
  var callTransferRelayed = function (relayerAddress) {
      return function (v) {
          return function (txOpts) {
              return DApp_Util["callABIFn'"](new Data_Symbol.IsSymbol(function () {
                  return "transferRelayed(bytes,uint32,uint256,uint256,address)";
              }))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple5)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeAddress))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeAddress))))))))(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordBase(new Data_Symbol.IsSymbol(function () {
                  return "destination";
              }))()())()()(new Data_Symbol.IsSymbol(function () {
                  return "tokenID";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "feeAmount";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "nonce";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "signature";
              }))())(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay)(Type_Proxy["Proxy"].value)(relayerAddress)(txOpts)({
                  signature: DApp_Relay_Types.packSignature(v.signature),
                  feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
                  nonce: v.nonce,
                  tokenID: DApp_Util.widenUIntN32(v.tokenID),
                  destination: v.destination
              });
          };
      };
  };
  var callMintRelayed = function (relayerAddress) {
      return function (v) {
          return function (txOpts) {
              return DApp_Util["callABIFn'"](new Data_Symbol.IsSymbol(function () {
                  return "mintRelayed(bytes,uint32,uint256,bytes)";
              }))(Network_Ethereum_Web3_Solidity_Tuple.genericTuple4)(Network_Ethereum_Web3_Solidity_Generic.abiEncodeConstructor(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize32)))(Network_Ethereum_Web3_Solidity_Generic.abiDataInductive(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeUIntN(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeUint(Network_Ethereum_Web3_Solidity_Size.intSize256)))(Network_Ethereum_Web3_Solidity_Generic.abiDataBase(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeTagged(Network_Ethereum_Web3_Solidity_EncodingType.encodingTypeBytesD))(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeTagged(Network_Ethereum_Web3_Solidity_AbiEncoding.abiEncodeBytesD)))))))(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordInductive(Network_Ethereum_Web3_Solidity_Generic.isoRecordBase(new Data_Symbol.IsSymbol(function () {
                  return "tokenData";
              }))()())()()(new Data_Symbol.IsSymbol(function () {
                  return "feeAmount";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "nonce";
              }))())()()(new Data_Symbol.IsSymbol(function () {
                  return "signature";
              }))())(Network_Ethereum_Web3_Types_TokenUnit.unitSpecNoPay)(Type_Proxy["Proxy"].value)(relayerAddress)(txOpts)({
                  signature: DApp_Relay_Types.packSignature(v.signature),
                  feeAmount: DApp_Util.widenUIntN128(v.feeAmount),
                  nonce: v.nonce,
                  tokenData: v.tokenData
              });
          };
      };
  };
  exports["mintRelayed"] = mintRelayed;
  exports["transferRelayed"] = transferRelayed;
  exports["mintRelayed'"] = mintRelayed$prime;
  exports["transferRelayed'"] = transferRelayed$prime;
  exports["callMintRelayed"] = callMintRelayed;
  exports["callTransferRelayed"] = callTransferRelayed;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Fold"] = $PS["Data.Lens.Fold"] || {};
  var exports = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
  var preview = function (p) {
      var $98 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
      var $99 = foldMapOf(p)(function ($101) {
          return Data_Maybe_First.First(Data_Maybe.Just.create($101));
      });
      return function ($100) {
          return $98($99($100));
      };
  };
  var previewOn = function (s) {
      return function (p) {
          return preview(p)(s);
      };
  };
  exports["previewOn"] = previewOn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Prism"] = $PS["Data.Lens.Prism"] || {};
  var exports = $PS["Data.Lens.Prism"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];                                                                                         
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  exports["prism"] = prism;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lens.Prism.Maybe"] = $PS["Data.Lens.Prism.Maybe"] || {};
  var exports = $PS["Data.Lens.Prism.Maybe"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];
  var Data_Maybe = $PS["Data.Maybe"];
  var _Just = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
  };
  exports["_Just"] = _Just;
})(PS);
(function(exports) {
  "use strict";
  const HttpProvider = require('ethjs-provider-http');

  exports.httpProvider = function (providerUrl) {
      return function () {
          if (typeof web3 !== 'undefined' && web3.currentProvider.host == providerUrl) {
             return web3.currentProvider;
          } else {
             return new HttpProvider(providerUrl);
          }
      };
  };
})(PS["Network.Ethereum.Web3.Types.Provider"] = PS["Network.Ethereum.Web3.Types.Provider"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Network.Ethereum.Web3.Types.Provider"] = $PS["Network.Ethereum.Web3.Types.Provider"] || {};
  var exports = $PS["Network.Ethereum.Web3.Types.Provider"];
  var $foreign = $PS["Network.Ethereum.Web3.Types.Provider"];
  exports["httpProvider"] = $foreign.httpProvider;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var getEnv = mkEffect(function (v) {
      return $foreign.process.env;
  });
  var lookupEnv = function (k) {
      return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))(getEnv);
  };
  exports["lookupEnv"] = lookupEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DApp.Support"] = $PS["DApp.Support"] || {};
  var exports = $PS["DApp.Support"];
  var Chanterelle_Internal_Artifact = $PS["Chanterelle.Internal.Artifact"];
  var Chanterelle_Internal_Logging = $PS["Chanterelle.Internal.Logging"];
  var Chanterelle_Internal_Types_Artifact = $PS["Chanterelle.Internal.Types.Artifact"];
  var Chanterelle_Internal_Utils_Error = $PS["Chanterelle.Internal.Utils.Error"];
  var Contracts_RelayableNFT = $PS["Contracts.RelayableNFT"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var DApp_Relay = $PS["DApp.Relay"];
  var DApp_Util = $PS["DApp.Util"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Prism_Maybe = $PS["Data.Lens.Prism.Maybe"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Network_Ethereum_Core_BigNumber = $PS["Network.Ethereum.Core.BigNumber"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Signatures = $PS["Network.Ethereum.Core.Signatures"];
  var Network_Ethereum_Web3_Api = $PS["Network.Ethereum.Web3.Api"];
  var Network_Ethereum_Web3_Solidity_Size = $PS["Network.Ethereum.Web3.Solidity.Size"];
  var Network_Ethereum_Web3_Solidity_UInt = $PS["Network.Ethereum.Web3.Solidity.UInt"];
  var Network_Ethereum_Web3_Types_Provider = $PS["Network.Ethereum.Web3.Types.Provider"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var Node_Process = $PS["Node.Process"];                
  var readArtifacts = function (dictMonadAff) {
      return function (networkID) {
          return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromMaybe("build/RelayableNFT.json"))(Node_Process.lookupEnv("RELAYABLENFT_ARTIFACT"))))(function (rnftPath) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromMaybe("build/FungibleToken.json"))(Node_Process.lookupEnv("FUNGIBLETOKEN_ARTIFACT"))))(function (ftPath) {
                  return Chanterelle_Internal_Utils_Error["withExceptT'"](Effect_Aff.monadThrowAff)(Effect_Exception.error)((function () {
                      var readArtifact$prime = function (name) {
                          return function (path) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Info.value)("Reading " + (name + (" artifact at " + path))))(function () {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Artifact.readArtifact(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(path))(function (art) {
                                      var maddress = Data_Lens_Fold.previewOn(art)((function () {
                                          var $13 = Chanterelle_Internal_Types_Artifact["_network"](networkID)(Data_Lens_Internal_Forget.strongForget);
                                          var $14 = Data_Lens_Prism_Maybe["_Just"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
                                          var $15 = Data_Lens_Prism_Maybe["_Just"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
                                          return function ($16) {
                                              return $13($14(Chanterelle_Internal_Types_Artifact["_Deployed"]($15(Chanterelle_Internal_Types_Artifact["_address"]($16)))));
                                          };
                                      })());
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))("Couldn't find valid deploy address for chain ID " + (Data_Show.show(Data_Show.showInt)(networkID) + (" in artifact: " + path))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff)))(maddress))(function (addr) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(addr);
                                      });
                                  });
                              });
                          };
                      };
                      var readAddress$prime = function (addrStr) {
                          return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))("Couldn't make a valid address out of " + Data_Show.show(Data_Show.showString)(addrStr)))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff)))(Control_Bind.bind(Data_Maybe.bindMaybe)(Network_Ethereum_Core_HexString.mkHexString(addrStr))(Network_Ethereum_Core_Signatures.mkAddress));
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Data_Maybe.maybe(readArtifact$prime("RelayableNFT")(rnftPath))(readAddress$prime))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Node_Process.lookupEnv("RELAYABLENFT_ADDRESS"))))(function (rnft) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Info.value)("Using RelayableNFT address: " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(rnft)))(function () {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Data_Maybe.maybe(readArtifact$prime("FungibleToken")(ftPath))(readAddress$prime))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Node_Process.lookupEnv("FUNGIBLETOKEN_ADDRESS"))))(function (ft) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Info.value)("Using FungibleToken address: " + Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(ft)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))({
                                          rnft: rnft,
                                          ft: ft
                                      });
                                  });
                              });
                          });
                      });
                  })());
              });
          }));
      };
  };
  var mkEnv = function (dictMonadAff) {
      return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromMaybe("http://localhost:8545"))(Node_Process.lookupEnv("NODE_URL"))))(function (nodeUrl) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Network_Ethereum_Web3_Types_Provider.httpProvider(nodeUrl)))(function (provider) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.lookupEnv("RELAYER_PRIVATE_KEY")))(function (relayerPrivateKeyEnv) {
                  var relayerPrivateKey = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_Signatures.mkPrivateKey)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_Ethereum_Core_HexString.mkHexString)(relayerPrivateKeyEnv));
                  return Control_Bind.bind(Effect_Aff.bindAff)(Network_Ethereum_Web3_Types_Types.runWeb3(provider)(Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Functor.mapFlipped(Network_Ethereum_Web3_Types_Types.functorWeb3)(Network_Ethereum_Web3_Api.net_version)(function (chainIDString) {
                      return Control_Alt.alt(Data_Maybe.altMaybe)(Network_Ethereum_Core_BigNumber.parseBigNumber(Data_Int.decimal)(chainIDString))(Network_Ethereum_Core_BigNumber.parseBigNumber(Data_Int.hexadecimal)(chainIDString));
                  }))(function (mChainID) {
                      return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(Effect_Exception.error("Couldn't parse the chain ID on this node...")))(Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3))(mChainID))(function (chainID) {
                          var chainIDInt = Network_Ethereum_Core_BigNumber.unsafeToInt(chainID);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Network_Ethereum_Web3_Types_Types.bindWeb3)(Chanterelle_Internal_Logging.log(Network_Ethereum_Web3_Types_Types.monadEffectWeb3)(Chanterelle_Internal_Logging.Info.value)("Running on node " + (nodeUrl + (" (chain ID " + (Data_Show.show(Network_Ethereum_Core_BigNumber.showBigNumber)(chainID) + ")")))))(function () {
                              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)((function () {
                                  if (relayerPrivateKey instanceof Data_Maybe.Just) {
                                      var addr = Network_Ethereum_Core_Signatures.privateToAddress(relayerPrivateKey.value0);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Network_Ethereum_Web3_Types_Types.bindWeb3)(Chanterelle_Internal_Logging.log(Network_Ethereum_Web3_Types_Types.monadEffectWeb3)(Chanterelle_Internal_Logging.Info.value)("Using relayer account " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(addr) + " (derived from RELAYER_PRIVATE_KEY)")))(function () {
                                          return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)({
                                              addr: addr,
                                              isFromPrivateKey: true
                                          });
                                      });
                                  };
                                  if (relayerPrivateKey instanceof Data_Maybe.Nothing) {
                                      return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Data_Functor.mapFlipped(Network_Ethereum_Web3_Types_Types.functorWeb3)(Network_Ethereum_Web3_Api.eth_getAccounts)(Data_Array.head))(function (v) {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              return Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3)(Effect_Exception.error("No accounts exist on the node, and no valid RELAYER_PRIVATE_KEY was not supplied"));
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Network_Ethereum_Web3_Types_Types.bindWeb3)(Chanterelle_Internal_Logging.log(Network_Ethereum_Web3_Types_Types.monadEffectWeb3)(Chanterelle_Internal_Logging.Info.value)("Using relayer account " + (Data_Show.show(Network_Ethereum_Core_Signatures.addressShow)(v.value0) + " (first account on the node)")))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Network_Ethereum_Web3_Types_Types.bindWeb3)(Chanterelle_Internal_Logging.log(Network_Ethereum_Web3_Types_Types.monadEffectWeb3)(Chanterelle_Internal_Logging.Warn.value)("WE ARE NOT CHECKING IF THE ACCOUNT IS LOCKED. MAKE SURE ITS UNLOCKED :)"))(function () {
                                                      return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)({
                                                          addr: v.value0,
                                                          isFromPrivateKey: false
                                                      });
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at DApp.Support (line 73, column 47 - line 78, column 49): " + [ v.constructor.name ]);
                                      });
                                  };
                                  throw new Error("Failed pattern match at DApp.Support (line 68, column 23 - line 78, column 49): " + [ relayerPrivateKey.constructor.name ]);
                              })())(function (primaryAccount) {
                                  return Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3)({
                                      primaryAccount: primaryAccount,
                                      chainID: chainID,
                                      chainIDInt: chainIDInt
                                  });
                              });
                          });
                      });
                  })))(function (eWeb3Env) {
                      return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                          if (eWeb3Env instanceof Data_Either.Left) {
                              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Couldn't get web3 metadata: " + Data_Show.show(Network_Ethereum_Web3_Types_Types.showWeb3Error)(eWeb3Env.value0)));
                          };
                          if (eWeb3Env instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(eWeb3Env.value0);
                          };
                          throw new Error("Failed pattern match at DApp.Support (line 80, column 14 - line 82, column 36): " + [ eWeb3Env.constructor.name ]);
                      })())(function (web3Env) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(readArtifacts(Effect_Aff_Class.monadAffAff)(web3Env.chainIDInt))(function (artifacts) {
                              var rnftTxOpts = DApp_Util.makeTxOpts({
                                  from: web3Env.primaryAccount.addr,
                                  to: artifacts.rnft
                              });
                              var getRelayNonce = function (addr) {
                                  return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(Contracts_RelayableNFT.getCurrentRelayNonce(rnftTxOpts)(Network_Ethereum_Web3_Types_Types.Latest.value)({
                                      addr: addr
                                  }))(Data_Either.either((function () {
                                      var $17 = Control_Monad_Error_Class.throwError(Network_Ethereum_Web3_Types_Types.monadThrowWeb3);
                                      var $18 = Data_Show.show(Network_Ethereum_Web3_Types_Types.showCallError);
                                      return function ($19) {
                                          return $17(Effect_Exception.error($18($19)));
                                      };
                                  })())((function () {
                                      var $20 = Control_Applicative.pure(Network_Ethereum_Web3_Types_Types.applicativeWeb3);
                                      var $21 = Network_Ethereum_Web3_Solidity_UInt.unUIntN(Network_Ethereum_Web3_Solidity_Size.knownSizeLoop(Network_Ethereum_Web3_Solidity_Size.countBase)(Network_Ethereum_Web3_Solidity_Size.knownSizeBase(Network_Ethereum_Web3_Solidity_Size.sizeN2))(Network_Ethereum_Web3_Solidity_Size.sizeN3));
                                      return function ($22) {
                                          return $20($21($22));
                                      };
                                  })()));
                              };
                              var callTransferRelayed = function (xfer) {
                                  return DApp_Relay.callTransferRelayed(web3Env.primaryAccount.addr)(xfer)(rnftTxOpts);
                              };
                              var callMintRelayed = function (mint) {
                                  return DApp_Relay.callMintRelayed(web3Env.primaryAccount.addr)(mint)(rnftTxOpts);
                              };
                              return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                  var $10 = !web3Env.primaryAccount.isFromPrivateKey;
                                  if ($10) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                          doMintRelayed: function (msg) {
                                              return DApp_Relay.mintRelayed(msg)(rnftTxOpts);
                                          },
                                          doTransferRelayed: function (xfer) {
                                              return DApp_Relay.transferRelayed(xfer)(rnftTxOpts);
                                          },
                                          callMintRelayed: callMintRelayed,
                                          callTransferRelayed: callTransferRelayed,
                                          getRelayNonce: getRelayNonce
                                      });
                                  };
                                  if (relayerPrivateKey instanceof Data_Maybe.Nothing) {
                                      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("The impossible happened -- the supplied relayer private key spontaneously combusted"));
                                  };
                                  if (relayerPrivateKey instanceof Data_Maybe.Just) {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                          doMintRelayed: function (msg) {
                                              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(DApp_Relay["mintRelayed'"](relayerPrivateKey.value0)(msg)(rnftTxOpts))(Network_Ethereum_Web3_Api.eth_sendRawTransaction);
                                          },
                                          doTransferRelayed: function (xfer) {
                                              return Control_Bind.bind(Network_Ethereum_Web3_Types_Types.bindWeb3)(DApp_Relay["transferRelayed'"](relayerPrivateKey.value0)(xfer)(rnftTxOpts))(Network_Ethereum_Web3_Api.eth_sendRawTransaction);
                                          },
                                          callMintRelayed: callMintRelayed,
                                          callTransferRelayed: callTransferRelayed,
                                          getRelayNonce: getRelayNonce
                                      });
                                  };
                                  throw new Error("Failed pattern match at DApp.Support (line 98, column 10 - line 106, column 10): " + [ relayerPrivateKey.constructor.name ]);
                              })())(function (relayActions) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                      chainID: web3Env.chainID,
                                      addresses: {
                                          fungibleToken: artifacts.ft,
                                          relayableNFT: artifacts.rnft,
                                          primaryAccount: web3Env.primaryAccount.addr
                                      },
                                      provider: provider,
                                      relayActions: relayActions
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["mkEnv"] = mkEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Decode.Parser"] = $PS["Data.Argonaut.Decode.Parser"] || {};
  var exports = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];                
  var parseJson = (function () {
      var $1 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
          return new Data_Argonaut_Decode_Error.TypeMismatch("JSON");
      });
      return function ($2) {
          return $1(Data_Argonaut_Parser.jsonParser($2));
      };
  })();
  exports["parseJson"] = parseJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeMaybe = function (encoder) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encoder(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 29, column 23 - line 31, column 22): " + [ v.constructor.name ]);
      };
  };                                                 
  var encodeArray = function (encoder) {
      var $52 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      return function ($53) {
          return Data_Argonaut_Core.fromArray($52($53));
      };
  };
  exports["encodeMaybe"] = encodeMaybe;
  exports["encodeString"] = encodeString;
  exports["encodeArray"] = encodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                                        
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
          });
      };
  };                                                                                          
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson)));
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson)));
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Lora.FoamBridge"] = $PS["Lora.FoamBridge"] || {};
  var exports = $PS["Lora.FoamBridge"];
  var Chanterelle_Internal_Logging = $PS["Chanterelle.Internal.Logging"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var DApp_Relay_Types = $PS["DApp.Relay.Types"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Web3_Types_Types = $PS["Network.Ethereum.Web3.Types.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var testRelay = function (v) {
      return function (msg) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Debug.value)("doing dry run of " + Data_Show.show(DApp_Relay_Types.showDecodedMessage)(msg)))(function () {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))((function () {
                  if (msg instanceof DApp_Relay_Types.DecodedMint) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect_Aff.monadAff)(Network_Ethereum_Web3_Types_Types.runWeb3(v.provider)(v.relayActions.callMintRelayed(msg.value0)));
                  };
                  if (msg instanceof DApp_Relay_Types.DecodedTransfer) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect_Aff.monadAff)(Network_Ethereum_Web3_Types_Types.runWeb3(v.provider)(v.relayActions.callTransferRelayed(msg.value0)));
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(Network_Ethereum_Web3_Types_Types.NullError.value);
              })())(function (drr) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Debug.value)("dry run result: " + Data_Show.show(Data_Either.showEither(Network_Ethereum_Web3_Types_Types.showWeb3Error)(Network_Ethereum_Core_HexString.showHexString))(drr)))(function () {
                      return Data_Functor["void"](Control_Monad_Except_Trans.functorExceptT(Effect_Aff.functorAff))(Control_Monad_Except_Trans.ExceptT(Control_Applicative.pure(Effect_Aff.applicativeAff)(drr)));
                  });
              });
          });
      };
  };
  var runRelay = function (v) {
      return function (msg) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Chanterelle_Internal_Logging.log(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Chanterelle_Internal_Logging.Debug.value)("sumitting to blockchain" + Data_Show.show(DApp_Relay_Types.showDecodedMessage)(msg)))(function () {
              if (msg instanceof DApp_Relay_Types.DecodedMint) {
                  return Control_Monad_Except_Trans.ExceptT(Network_Ethereum_Web3_Types_Types.runWeb3(v.provider)(v.relayActions.doMintRelayed(msg.value0)));
              };
              if (msg instanceof DApp_Relay_Types.DecodedTransfer) {
                  return Control_Monad_Except_Trans.ExceptT(Network_Ethereum_Web3_Types_Types.runWeb3(v.provider)(v.relayActions.doTransferRelayed(msg.value0)));
              };
              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(Network_Ethereum_Web3_Types_Types.NullError.value);
          });
      };
  };
  var testAndRunRelay = function (env) {
      return function (msg) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(testRelay(env)(msg))(function () {
              return runRelay(env)(msg);
          }));
      };
  };
  var getPackedMessage = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_ByteString.fromString(v)(Node_Encoding.Base64.value))(Data_ByteString.tail);
  };
  var decodePackedMessage$prime = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(DApp_Relay_Types.decodePackedMessage);
  var performPUSH_DATAAction = function (v) {
      return function (v1) {
          if (v1.rxpk instanceof Data_Maybe.Just && v1.rxpk.value0.length === 1) {
              var bs = getPackedMessage(v1["rxpk"]["value0"][0].data);
              var hbs = Data_Functor.map(Data_Maybe.functorMaybe)(function (bs$prime) {
                  return Data_ByteString.toString(bs$prime)(Node_Encoding.Hex.value);
              })(bs);
              var msg = decodePackedMessage$prime(bs);
              return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                  if (msg instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("relaying message " + Data_Show.show(DApp_Relay_Types.showDecodedMessage)(msg.value0)))(function () {
                          return testAndRunRelay(v)(msg.value0);
                      });
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(Network_Ethereum_Web3_Types_Types.NullError.value));
              })())(function (result) {
                  if (result instanceof Data_Either.Left && result.value0 instanceof Network_Ethereum_Web3_Types_Types.NullError) {
                      return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Warn.value)("PUSH DATA packet payload cannot be decoded as a FOAM message");
                  };
                  if (result instanceof Data_Either.Left) {
                      return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging["Error"].value)("error when doing relay: " + Data_Show.show(Network_Ethereum_Web3_Types_Types.showWeb3Error)(result.value0));
                  };
                  if (result instanceof Data_Either.Right) {
                      return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("transaction succesfully relayed with id " + Data_Show.show(Network_Ethereum_Core_HexString.showHexString)(result.value0));
                  };
                  throw new Error("Failed pattern match at Lora.FoamBridge (line 31, column 5 - line 34, column 83): " + [ result.constructor.name ]);
              });
          };
          return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("Empty Push Data packet");
      };
  };
  exports["performPUSH_DATAAction"] = performPUSH_DATAAction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Lora.UDP.PushDataJSON"] = $PS["Lora.UDP.PushDataJSON"] || {};
  var exports = $PS["Lora.UDP.PushDataJSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var genericReceivedPacket = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericPushDataJSON = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });    
  var genericBase64Encoded = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showBase64Encoded = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericBase64Encoded)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "Base64Encoded";
  }))));
  var showReceivedPacket = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericReceivedPacket)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "data";
  }))(Data_Show.showRecordFieldsNil)(showBase64Encoded))))(new Data_Symbol.IsSymbol(function () {
      return "ReceivedPacket";
  }))));
  var showPushDataJSON = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPushDataJSON)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "rxpk";
  }))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(showReceivedPacket))))))(new Data_Symbol.IsSymbol(function () {
      return "PushDataJSON";
  }))));
  var encodeJsonBase64Encoded = Data_Argonaut_Encode_Class.encodeJsonJString;
  var encodeJsonReceivedPacket = Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeJsonBase64Encoded)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "data";
  }))())();
  var decodeJsonBase64Encoded = Data_Argonaut_Decode_Class.decodeJsonString;
  var decodeJsonReceivedPacket = Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(decodeJsonBase64Encoded)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "data";
  }))()())();
  var decodeJsonPushDataJSON = new Data_Argonaut_Decode_Class.DecodeJson(function (j) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(j))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeArray(decodeJsonReceivedPacket))(obj)("rxpk"))(function (rxpk) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  rxpk: rxpk
              });
          });
      });
  });
  exports["decodeJsonPushDataJSON"] = decodeJsonPushDataJSON;
  exports["showPushDataJSON"] = showPushDataJSON;
  exports["encodeJsonReceivedPacket"] = encodeJsonReceivedPacket;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Lora.UDP.Pkt"] = $PS["Lora.UDP.Pkt"] || {};
  var exports = $PS["Lora.UDP.Pkt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Decode_Parser = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Lora_UDP_PushDataJSON = $PS["Lora.UDP.PushDataJSON"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                                              
  var ProtocolToken = function (x) {
      return x;
  };
  var PUSH_DATA = (function () {
      function PUSH_DATA(value0) {
          this.value0 = value0;
      };
      PUSH_DATA.create = function (value0) {
          return new PUSH_DATA(value0);
      };
      return PUSH_DATA;
  })();
  var PULL_DATA = (function () {
      function PULL_DATA(value0) {
          this.value0 = value0;
      };
      PULL_DATA.create = function (value0) {
          return new PULL_DATA(value0);
      };
      return PULL_DATA;
  })();
  var PUSH_ACK = (function () {
      function PUSH_ACK(value0) {
          this.value0 = value0;
      };
      PUSH_ACK.create = function (value0) {
          return new PUSH_ACK(value0);
      };
      return PUSH_ACK;
  })();
  var PULL_ACK = (function () {
      function PULL_ACK(value0) {
          this.value0 = value0;
      };
      PULL_ACK.create = function (value0) {
          return new PULL_ACK(value0);
      };
      return PULL_ACK;
  })();
  var writeProtocolToken = function (dictMutableBuffer) {
      return function (v) {
          return function (ofs) {
              return Node_Buffer_Class.write(dictMutableBuffer)(Node_Buffer_Types.Int16BE.value)(Data_Int.toNumber(v))(ofs);
          };
      };
  };
  var writeGatewayMac = function (v) {
      return function (ofs) {
          return Node_Buffer_Internal.copy(0)(8)(v)(ofs);
      };
  };
  var write = function (v) {
      if (v instanceof PUSH_DATA) {
          var jsonString = Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonArray(Lora_UDP_PushDataJSON.encodeJsonReceivedPacket)))(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
              return "rxpk";
          }))())())(v.value0.json));
          var jsonLen = Data_String_CodePoints.length(jsonString);
          var buffLen = jsonLen + 11 | 0;
          return function __do() {
              var buff = Node_Buffer_Class.create(Node_Buffer.mutableBufferEffect)(buffLen)();
              Node_Buffer_Class.write(Node_Buffer.mutableBufferEffect)(Node_Buffer_Types.UInt8.value)(2.0)(0)(buff)();
              writeProtocolToken(Node_Buffer.mutableBufferEffect)(v.value0.token)(1)(buff)();
              Node_Buffer_Class.write(Node_Buffer.mutableBufferEffect)(Node_Buffer_Types.UInt8.value)(0.0)(3)(buff)();
              writeGatewayMac(v.value0.mac)(4)(buff)();
              Node_Buffer_Class.writeString(Node_Buffer.mutableBufferEffect)(Node_Encoding.ASCII.value)(12)(jsonLen)(jsonString)(buff)();
              return buff;
          };
      };
      if (v instanceof PUSH_ACK) {
          return function __do() {
              var buff = Node_Buffer_Class.fromArray(Node_Buffer.mutableBufferEffect)([ 2, 0, 0, 1 ])();
              writeProtocolToken(Node_Buffer.mutableBufferEffect)(v.value0.token)(1)(buff)();
              return buff;
          };
      };
      if (v instanceof PULL_DATA) {
          return Node_Buffer_Class.create(Node_Buffer.mutableBufferEffect)(0);
      };
      if (v instanceof PULL_ACK) {
          return function __do() {
              var buff = Node_Buffer_Class.fromArray(Node_Buffer.mutableBufferEffect)([ 2, 0, 0, 4 ])();
              writeProtocolToken(Node_Buffer.mutableBufferEffect)(v.value0.token)(1)(buff)();
              return buff;
          };
      };
      throw new Error("Failed pattern match at Lora.UDP.Pkt (line 180, column 1 - line 180, column 37): " + [ v.constructor.name ]);
  };
  var showGatewayMac = new Data_Show.Show(function (v) {
      return "GatewayMac " + Data_ByteString.toString(Data_ByteString.unsafeFreeze(v))(Node_Encoding.Hex.value);
  });
  var readProtocolToken = function (dictMutableBuffer) {
      return function (ofs) {
          return function (buff) {
              return Data_Functor.map((((dictMutableBuffer.Monad0()).Bind1()).Apply0()).Functor0())(function ($57) {
                  return ProtocolToken(Data_Int.round($57));
              })(Node_Buffer_Internal.read(dictMutableBuffer.Monad0())(Node_Buffer_Types.Int16BE.value)(ofs)(buff));
          };
      };
  };
  var readPUSH_ACK = function (buff) {
      return function __do() {
          var len = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          var $29 = len < 4;
          if ($29) {
              return Data_Maybe.Nothing.value;
          };
          var token = readProtocolToken(Node_Buffer.mutableBufferEffect)(1)(buff)();
          return Data_Maybe.Just.create(new PUSH_ACK({
              token: token
          }));
      };
  };
  var readGatewayMac = function (from) {
      return function (to) {
          return function (buff) {
              return function __do() {
                  var mac = Node_Buffer_Class.create(Node_Buffer.mutableBufferEffect)(to - from | 0)();
                  Node_Buffer_Internal.copy(from)(to)(buff)(0)(mac)();
                  return mac;
              };
          };
      };
  };
  var readPULL_DATA = function (buff) {
      return function __do() {
          var len = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          var $30 = len < 12;
          if ($30) {
              return Data_Maybe.Nothing.value;
          };
          var token = readProtocolToken(Node_Buffer.mutableBufferEffect)(1)(buff)();
          var mac = readGatewayMac(4)(11)(buff)();
          return Data_Maybe.Just.create(new PULL_DATA({
              token: token,
              mac: mac
          }));
      };
  };
  var readPUSH_DATA = function (buff) {
      return function __do() {
          var len = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          var $31 = len < 14;
          if ($31) {
              return Data_Maybe.Nothing.value;
          };
          var token = readProtocolToken(Node_Buffer.mutableBufferEffect)(1)(buff)();
          var mac = readGatewayMac(4)(11)(buff)();
          var jsonString = Node_Buffer_Class.readString(Node_Buffer.mutableBufferEffect)(Node_Encoding.ASCII.value)(12)(len)(buff)();
          var ePushDataJson = Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Parser.parseJson(jsonString))(Data_Argonaut_Decode_Class.decodeJson(Lora_UDP_PushDataJSON.decodeJsonPushDataJSON)))(function (json) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new PUSH_DATA({
                  token: token,
                  mac: mac,
                  json: json
              }));
          });
          (function () {
              if (ePushDataJson instanceof Data_Either.Left) {
                  return Effect_Console.log(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(ePushDataJson.value0))();
              };
              return Effect_Console.log("ok")();
          })();
          return Data_Either.hush(ePushDataJson);
      };
  };
  var genericProtocolToken = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showProtocolToken = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericProtocolToken)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showInt))(new Data_Symbol.IsSymbol(function () {
      return "ProtocolToken";
  }))));   
  var bufLoraVersion = function (b) {
      return Data_Functor.map(Effect.functorEffect)(Data_Int.round)(Node_Buffer_Internal.read(Effect.monadEffect)(Node_Buffer_Types.UInt8.value)(0)(b));
  };
  var bufLoraTypeIdentifier = function (b) {
      return Data_Functor.map(Effect.functorEffect)(Data_Int.round)(Node_Buffer_Internal.read(Effect.monadEffect)(Node_Buffer_Types.UInt8.value)(3)(b));
  };
  var decodeLoraPktType = function (buff) {
      return function __do() {
          var len = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          var $51 = len < 4;
          if ($51) {
              return Data_Maybe.Nothing.value;
          };
          var version = bufLoraVersion(buff)();
          if (version === 2) {
              return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(bufLoraTypeIdentifier(buff))();
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var read = function (b) {
      return function __do() {
          var loraType = decodeLoraPktType(b)();
          if (loraType instanceof Data_Maybe.Just && loraType.value0 === 0) {
              return readPUSH_DATA(b)();
          };
          if (loraType instanceof Data_Maybe.Just && loraType.value0 === 1) {
              return readPUSH_ACK(b)();
          };
          if (loraType instanceof Data_Maybe.Just && loraType.value0 === 2) {
              return readPULL_DATA(b)();
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["PUSH_DATA"] = PUSH_DATA;
  exports["PULL_DATA"] = PULL_DATA;
  exports["PUSH_ACK"] = PUSH_ACK;
  exports["PULL_ACK"] = PULL_ACK;
  exports["read"] = read;
  exports["write"] = write;
  exports["showProtocolToken"] = showProtocolToken;
  exports["showGatewayMac"] = showGatewayMac;
})(PS);
(function(exports) {
  "use strict";
  var dgram =require("dgram"); 

  exports.createSocketImpl = function (type) {
    return function (reuseAddr) {
      return function () {
        if (reuseAddr == null) {
          return dgram.createSocket(type);
        } else {
          return dgram.createSocket({ type: type, reuseAddr: reuseAddr });
        }
      };
    };
  };

  exports.bindImpl = function (socket) {
    return function (port) {
      return function (address) {
        return function () {
          return socket.bind(port, address);
        };
      };
    };
  };

  exports.onMessage = function (socket) {
    return function (callback) {
      return function () {
        socket.on("message", function (msg, from) {
          callback(msg)(from)();
        });
      };
    };
  };

  exports.sendImpl = function (socket) {
    return function (msg) {
      return function (offset) {
        return function (length) {
          return function (port) {
            return function (address) {
              return function (callback) {
                return function () {
                  if (offset == null || length == null) {
                    return socket.send(msg, port, address, callback);
                  } else {
                    return socket.send(msg, offset, length, port, address, callback);
                  }
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Node.Datagram"] = PS["Node.Datagram"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Datagram"] = $PS["Node.Datagram"] || {};
  var exports = $PS["Node.Datagram"];
  var $foreign = $PS["Node.Datagram"];
  var Data_Nullable = $PS["Data.Nullable"];                
  var UDPv4 = (function () {
      function UDPv4() {

      };
      UDPv4.value = new UDPv4();
      return UDPv4;
  })();
  var UDPv6 = (function () {
      function UDPv6() {

      };
      UDPv6.value = new UDPv6();
      return UDPv6;
  })();
  var send = function (socket) {
      return function (buffer) {
          return function (offset) {
              return function (len) {
                  return function (port) {
                      return function (addr) {
                          return function (callback) {
                              return $foreign.sendImpl(socket)(buffer)(Data_Nullable.toNullable(offset))(Data_Nullable.toNullable(len))(port)(addr)(Data_Nullable.toNullable(callback));
                          };
                      };
                  };
              };
          };
      };
  };
  var createSocket = function (v) {
      return function (reuseAddr) {
          if (v instanceof UDPv4) {
              return $foreign.createSocketImpl("udp4")(Data_Nullable.toNullable(reuseAddr));
          };
          if (v instanceof UDPv6) {
              return $foreign.createSocketImpl("udp6")(Data_Nullable.toNullable(reuseAddr));
          };
          throw new Error("Failed pattern match at Node.Datagram (line 59, column 1 - line 59, column 61): " + [ v.constructor.name, reuseAddr.constructor.name ]);
      };
  };
  var bindSocket = function (socket) {
      return function (port) {
          return function (addr) {
              return $foreign.bindImpl(socket)(Data_Nullable.toNullable(port))(Data_Nullable.toNullable(addr));
          };
      };
  };
  exports["UDPv4"] = UDPv4;
  exports["createSocket"] = createSocket;
  exports["bindSocket"] = bindSocket;
  exports["send"] = send;
  exports["onMessage"] = $foreign.onMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Lora.UDP.Server"] = $PS["Lora.UDP.Server"] || {};
  var exports = $PS["Lora.UDP.Server"];
  var Chanterelle_Internal_Logging = $PS["Chanterelle.Internal.Logging"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Lora_UDP_Pkt = $PS["Lora.UDP.Pkt"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Datagram = $PS["Node.Datagram"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var responder = function (dictMonadEffect) {
      return function (socket) {
          return function (addr) {
              return function (port) {
                  return function (pkt) {
                      return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
                          Chanterelle_Internal_Logging.log(Effect_Class.monadEffectEffect)(Chanterelle_Internal_Logging.Debug.value)("sending packet")();
                          var buff = Lora_UDP_Pkt.write(pkt)();
                          return Node_Datagram.send(socket)(buff)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(port)(addr)(Data_Maybe.Just.create(Chanterelle_Internal_Logging.log(Effect_Class.monadEffectEffect)(Chanterelle_Internal_Logging.Debug.value)("sent")))();
                      });
                  };
              };
          };
      };
  };
  var msgHandler = function (dictMonadAff) {
      return function (dictMonadEffect) {
          return function (socket) {
              return function (handler) {
                  return function (buff) {
                      return function (socketInfo) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Chanterelle_Internal_Logging.log(dictMonadAff.MonadEffect0())(Chanterelle_Internal_Logging.Debug.value)(""))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Chanterelle_Internal_Logging.log(dictMonadAff.MonadEffect0())(Chanterelle_Internal_Logging.Debug.value)("received UDP packet from " + (socketInfo.address + (":" + Data_Int.toStringAs(Data_Int.decimal)(socketInfo.port)))))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Show.show(Data_Show.showString))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.ASCII.value)(buff)))(Chanterelle_Internal_Logging.log(Effect_Class.monadEffectEffect)(Chanterelle_Internal_Logging.Info.value))))(function () {
                                      return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(Lora_UDP_Pkt.read(buff)))(function (maybePkt) {
                                          if (maybePkt instanceof Data_Maybe.Just) {
                                              return Effect_Aff_Class.liftAff(dictMonadAff)(handler(responder(Effect_Aff.monadEffectAff)(socket)(socketInfo.address)(socketInfo.port))(maybePkt.value0));
                                          };
                                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Chanterelle_Internal_Logging.log(dictMonadAff.MonadEffect0())(Chanterelle_Internal_Logging["Error"].value)("unrecognized packet"))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Show.show(Data_Show.showString))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.ASCII.value)(buff)))(Chanterelle_Internal_Logging.log(Effect_Class.monadEffectEffect)(Chanterelle_Internal_Logging["Error"].value))))(function () {
                                                  return Control_Bind.bindFlipped(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Chanterelle_Internal_Logging.log(dictMonadAff.MonadEffect0())(Chanterelle_Internal_Logging["Error"].value))(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(Data_Functor.map(Effect.functorEffect)(Data_Show.show(Data_Show.showString))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.ASCII.value)(buff))));
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var start = function (addr) {
      return function (port) {
          return function (handler) {
              return function __do() {
                  var socket = Node_Datagram.createSocket(Node_Datagram.UDPv4.value)(new Data_Maybe.Just(true))();
                  Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Node_Datagram.bindSocket(socket)(new Data_Maybe.Just(port))(new Data_Maybe.Just(addr)))();
                  return Node_Datagram.onMessage(socket)(function (buf) {
                      return function (sockInfo) {
                          return Effect_Aff.launchAff_(msgHandler(Effect_Aff_Class.monadAffAff)(Effect_Aff.monadEffectAff)(socket)(handler)(buf)(sockInfo));
                      };
                  })();
              };
          };
      };
  };
  exports["start"] = start;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Chanterelle_Internal_Logging = $PS["Chanterelle.Internal.Logging"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var DApp_Support = $PS["DApp.Support"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Lora_FoamBridge = $PS["Lora.FoamBridge"];
  var Lora_UDP_Pkt = $PS["Lora.UDP.Pkt"];
  var Lora_UDP_PushDataJSON = $PS["Lora.UDP.PushDataJSON"];
  var Lora_UDP_Server = $PS["Lora.UDP.Server"];
  var Node_Process = $PS["Node.Process"];                
  var handler = function (env) {
      return function (respond) {
          return function (pkt) {
              if (pkt instanceof Lora_UDP_Pkt.PUSH_DATA) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("PUSH_DATA"))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_Pkt.showProtocolToken)(pkt.value0.token)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_Pkt.showGatewayMac)(pkt.value0.mac)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_PushDataJSON.showPushDataJSON)(pkt.value0.json)))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(respond(new Lora_UDP_Pkt.PUSH_ACK({
                                      token: pkt.value0.token
                                  })))(function () {
                                      return Lora_FoamBridge.performPUSH_DATAAction(env)(pkt.value0.json);
                                  });
                              });
                          });
                      });
                  });
              };
              if (pkt instanceof Lora_UDP_Pkt.PUSH_ACK) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("PUSH_ACK"))(function () {
                      return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_Pkt.showProtocolToken)(pkt.value0.token));
                  });
              };
              if (pkt instanceof Lora_UDP_Pkt.PULL_DATA) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("PULL_DATA"))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_Pkt.showProtocolToken)(pkt.value0.token)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)(Data_Show.show(Lora_UDP_Pkt.showGatewayMac)(pkt.value0.mac)))(function () {
                              return respond(new Lora_UDP_Pkt.PULL_ACK({
                                  token: pkt.value0.token
                              }));
                          });
                      });
                  });
              };
              return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging["Error"].value)("unimplemented packet");
          };
      };
  };
  var main = Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(DApp_Support.mkEnv(Effect_Aff_Class.monadAffAff))(function (env) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.setLogLevel(Chanterelle_Internal_Logging.Debug.value)))(function () {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.fromMaybe("0.0.0.0"))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.lookupEnv("PACKET_RECEIVER_ADDRESS"))))(function (addr) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.fromMaybe(7000))(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.lookupEnv("PACKET_RECEIVER_PORT")))(function (maybePort) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(maybePort));
              })))(function (port) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Lora_UDP_Server.start(addr)(port)(handler(env))))(function () {
                      return Chanterelle_Internal_Logging.log(Effect_Aff.monadEffectAff)(Chanterelle_Internal_Logging.Info.value)("listening to UDP packets at " + (addr + (":" + Data_Show.show(Data_Show.showInt)(port))));
                  });
              });
          });
      });
  }));
  exports["handler"] = handler;
  exports["main"] = main;
})(PS);
PS["Main"].main();